<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\build\Xnode.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\build\Xnode.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Nov 03 11:01:46 2023
<BR><P>
<H3>Maximum Stack Usage =       3488 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
getDatafromSD &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18a]">sdmalloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">die</a><BR>
 <LI><a href="#[2b1]">compact</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">die</a><BR>
 <LI><a href="#[144]">read_isFTP</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">die</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[216]">nodeInqTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f6]">sendShortSubTask</a><BR>
 <LI><a href="#[2a1]">beginTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f6]">sendShortSubTask</a><BR>
 <LI><a href="#[1f5]">sendNoticeSubTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">sendNoticeSubTask</a><BR>
 <LI><a href="#[359]">sendNoticeEndTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">sendNoticeSubTask</a><BR>
 <LI><a href="#[1f1]">nodeInqTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">sendNoticeSubTask</a><BR>
 <LI><a href="#[2a0]">beginTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">sendNoticeSubTask</a><BR>
 <LI><a href="#[2d6]">f_putc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d6]">f_putc</a><BR>
 <LI><a href="#[125]">CGU_ConfigPWR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[125]">CGU_ConfigPWR</a><BR>
 <LI><a href="#[3da]">yaffs_verify_dir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">yaffs_verify_obj_in_dir</a><BR>
 <LI><a href="#[4a6]">yaffs_summary_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[405]">yaffs_wr_chunk_tags_nand</a><BR>
 <LI><a href="#[3ff]">yaffs_gc_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[420]">yaffs_generic_obj_del</a><BR>
 <LI><a href="#[4a3]">yaffs_soft_del_worker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a3]">yaffs_soft_del_worker</a><BR>
 <LI><a href="#[496]">yaffs_prune_worker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[496]">yaffs_prune_worker</a><BR>
 <LI><a href="#[4c3]">yaffsfs_DoFindDirectory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[489]">yaffsfs_FollowLink</a><BR>
 <LI><a href="#[421]">yaffs_del_dir_contents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">yaffs_del_dir_contents</a><BR>
 <LI><a href="#[3c1]">yaffs_qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c1]">yaffs_qsort</a><BR>
 <LI><a href="#[3a3]">yaffs2_checkpt_tnode_worker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a3]">yaffs2_checkpt_tnode_worker</a><BR>
 <LI><a href="#[d0]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">qsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1f]">ADC1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[37]">ATIMER_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[43]">ATTimer</a> from 4gftp.o(i.ATTimer) referenced from 4gftp.o(i.ATTCPDataGet)
 <LI><a href="#[43]">ATTimer</a> from 4gftp.o(i.ATTimer) referenced from 4gftp.o(i.ATTimeGet)
 <LI><a href="#[43]">ATTimer</a> from 4gftp.o(i.ATTimer) referenced from 4gftp.o(i.checkATmessageReply)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3b]">CAN0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[35]">CAN1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[a]">DAC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[c]">DMA_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[f]">ETH_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[34]">EVRT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[d]">EZH_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[e]">FLASH_EEPROM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[32]">GINT0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[33]">GINT1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2a]">GPIO0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2b]">GPIO1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2c]">GPIO2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2d]">GPIO3_IRQHandler</a> from trx_access.o(i.GPIO3_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2e]">GPIO4_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2f]">GPIO5_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[30]">GPIO6_IRQHandler</a> from adxl362.o(i.GPIO6_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[31]">GPIO7_IRQHandler</a> from ads131.o(i.GPIO7_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[9a]">GetChar</a> from debug_frmwrk.o(i.GetChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[9b]">GetCharInNonBlock</a> from debug_frmwrk.o(i.GetCharInNonBlock) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1c]">I2C0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[26]">I2S0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[27]">I2S1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[11]">LCD_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[b]">M0CORE_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3a]">M0s_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1a]">MCPWM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[bb]">NANDfunc_read_cycle</a> from yaffs_nand_drv.o(i.NANDfunc_read_cycle) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[48]">OffTimer</a> from 4gftp.o(i.OffTimer) referenced from 4gftp.o(i.ManualFTP)
 <LI><a href="#[48]">OffTimer</a> from 4gftp.o(i.OffTimer) referenced from 4gftp.o(i.UpdateParamMQTT)
 <LI><a href="#[48]">OffTimer</a> from 4gftp.o(i.OffTimer) referenced from 4gftp.o(i.Voltage_writedata_MQTT)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[93]">PutChar</a> from debug_frmwrk.o(i.PutChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[97]">PutDec</a> from debug_frmwrk.o(i.PutDec) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[98]">PutDec16</a> from debug_frmwrk.o(i.PutDec16) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[99]">PutDec32</a> from debug_frmwrk.o(i.PutDec32) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[94]">PutHex</a> from debug_frmwrk.o(i.PutHex) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[95]">PutHex16</a> from debug_frmwrk.o(i.PutHex16) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[96]">PutHex32</a> from debug_frmwrk.o(i.PutHex32) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[91]">Puts</a> from debug_frmwrk.o(i.Puts) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[92]">Puts_</a> from debug_frmwrk.o(i.Puts_) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[3c]">QEI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[15]">RIT_IRQHandler</a> from systime.o(i.RIT_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[50]">ReliableComm_receive</a> from remotecommand.o(i.ReliableComm_receive) referenced from remotecommand.o(i.RemoteCommand_init)
 <LI><a href="#[51]">ReliableComm_sendDone</a> from remotecommand.o(i.ReliableComm_sendDone) referenced from remotecommand.o(i.RemoteCommand_init)
 <LI><a href="#[a5]">ReportTimer</a> from 4gftp.o(i.ReportTimer) referenced from 4gftp.o(i.reportMQTT)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[14]">SCT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[10]">SDIO_IRQHandler</a> from lpc43xx_sdif.o(i.SDIO_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[29]">SGPIO_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[28]">SPIFI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1e]">SPI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[20]">SSP0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[21]">SSP1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[4b]">SendLData_SLDIReq</a> from reliablecomm.o(i.SendLData_SLDIReq) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[4c]">SendLData_received</a> from reliablecomm.o(i.SendLData_received) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[4d]">SendLData_sendDone</a> from reliablecomm.o(i.SendLData_sendDone) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[49]">SendSMsg_received</a> from reliablecomm.o(i.SendSMsg_received) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[4a]">SendSMsg_sendDone</a> from reliablecomm.o(i.SendSMsg_sendDone) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[44]">TCP_Rev_Timer</a> from 4gftp.o(i.TCP_Rev_Timer) referenced from 4gftp.o(i.ATTCPReceive)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[19]">TIMER3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[67]">TimerNotice_fired</a> from sendldata.o(i.TimerNotice_fired) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[6d]">TimerShort_fired</a> from sendsmsg.o(i.TimerShort_fired) referenced from sendsmsg.o(i.SendSMsg_init)
 <LI><a href="#[68]">TimerTimeout_fired</a> from sendldata.o(i.TimerTimeout_fired) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[6e]">TimerTimeout_fired</a> from sendsmsg.o(i.TimerTimeout_fired) referenced from sendsmsg.o(i.SendSMsg_init)
 <LI><a href="#[69]">TimerWait1_fired</a> from sendldata.o(i.TimerWait1_fired) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[6a]">TimerWait2_fired</a> from sendldata.o(i.TimerWait2_fired) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[22]">UART0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[23]">UART1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[24]">UART2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[25]">UART3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[12]">USB0_IRQHandler</a> from usbhw.o(i.USB0_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[13]">USB1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[86]">USB_EndPoint0</a> from usbcore.o(i.USB_EndPoint0) referenced from vcom.o(i.VCOM_Init)
 <LI><a href="#[87]">USB_EndPoint1</a> from usbuser.o(i.USB_EndPoint1) referenced from vcom.o(i.VCOM_Init)
 <LI><a href="#[88]">USB_EndPoint2</a> from usbuser.o(i.USB_EndPoint2) referenced from vcom.o(i.VCOM_Init)
 <LI><a href="#[85]">USB_Reset_Event</a> from usbuser.o(i.USB_Reset_Event) referenced from vcom.o(i.VCOM_Init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[36]">VADC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[39]">WDT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[b1]">XCWriteTask</a> from settings.o(i.XCWriteTask) referenced from settings.o(i.xnodecfgfunc)
 <LI><a href="#[3e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc43xx.o(.text)
 <LI><a href="#[40]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[41]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3f]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[8e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[8e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[8f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[47]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[77]">callback_tsc_cmd</a> from timesync.o(i.callback_tsc_cmd) referenced from timesync.o(i.TimeSync_Register)
 <LI><a href="#[a0]">compare</a> from timesync.o(i.compare) referenced from timesync.o(i.medium_select)
 <LI><a href="#[5b]">drpresetexec</a> from retrievedata.o(i.drpresetexec) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[5e]">drpresetfunc</a> from retrievedata.o(i.drpresetfunc) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[5c]">drpresetresp</a> from retrievedata.o(i.drpresetresp) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[5d]">drpresetsent</a> from retrievedata.o(i.drpresetsent) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[5f]">drretrieveexec</a> from retrievedata.o(i.drretrieveexec) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[62]">drretrievefunc</a> from retrievedata.o(i.drretrievefunc) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[60]">drretrieveresp</a> from retrievedata.o(i.drretrieveresp) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[61]">drretrievesent</a> from retrievedata.o(i.drretrievesent) referenced from retrievedata.o(i.RetrieveData_init)
 <LI><a href="#[ae]">feedwdt</a> from xnode.o(i.feedwdt) referenced from xnode.o(i.vAppMainTask)
 <LI><a href="#[46]">gcRecvTask</a> from genericcomm.o(i.gcRecvTask) referenced from genericcomm.o(i.GenericComm_init)
 <LI><a href="#[a8]">getDatafromSD</a> from retrievedata.o(i.getDatafromSD) referenced from retrievedata.o(i.startDrPreset)
 <LI><a href="#[56]">getdataexec</a> from remotesensing.o(i.getdataexec) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[59]">getdatafunc</a> from remotesensing.o(i.getdatafunc) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[57]">getdataresp</a> from remotesensing.o(i.getdataresp) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[58]">getdatasent</a> from remotesensing.o(i.getdatasent) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[42]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a9]">ldRTask</a> from sendldata.o(i.ldRTask) referenced from sendldata.o(i.startRTask)
 <LI><a href="#[6b]">ldRecvTask</a> from sendldata.o(i.ldRecvTask) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[aa]">ldSTask</a> from sendldata.o(i.ldSTask) referenced from sendldata.o(i.startSTask)
 <LI><a href="#[ab]">ldTTask</a> from sendldata.o(i.ldTTask) referenced from sendldata.o(i.startTTask)
 <LI><a href="#[64]">ldcallback_ack</a> from sendldata.o(i.ldcallback_ack) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[66]">ldcallback_data</a> from sendldata.o(i.ldcallback_data) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[65]">ldcallback_notice</a> from sendldata.o(i.ldcallback_notice) referenced from sendldata.o(i.SendLData_init)
 <LI><a href="#[3d]">main</a> from xnode.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a1]">processdatatask</a> from remotesensing.o(i.processdatatask) referenced from remotesensing.o(i.processdata)
 <LI><a href="#[af]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a7]">prvQueueSensingTask</a> from sensing.o(i.prvQueueSensingTask) referenced from sensing.o(i.startAcquisition)
 <LI><a href="#[a3]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b0]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[a4]">radio_callback</a> from radio.o(i.radio_callback) referenced from radio.o(i.radio_init)
 <LI><a href="#[4f]">rctimer</a> from reliablecomm.o(i.rctimer) referenced from reliablecomm.o(i.ReliableComm_send)
 <LI><a href="#[75]">reportMQTT</a> from 4gftp.o(i.reportMQTT) referenced from timesync.o(i.SyncClock_start)
 <LI><a href="#[81]">resetexec</a> from utils.o(i.resetexec) referenced from utils.o(i.Util_Init)
 <LI><a href="#[84]">resetfunc</a> from utils.o(i.resetfunc) referenced from utils.o(i.Util_Init)
 <LI><a href="#[82]">resetresp</a> from utils.o(i.resetresp) referenced from utils.o(i.Util_Init)
 <LI><a href="#[83]">resetsent</a> from utils.o(i.resetsent) referenced from utils.o(i.Util_Init)
 <LI><a href="#[a6]">rf233_interrupt_poll</a> from rf233.o(i.rf233_interrupt_poll) referenced from rf233.o(i.rf233_init)
 <LI><a href="#[5a]">rstimer</a> from remotesensing.o(i.rstimer) referenced from remotesensing.o(i.RemoteSensing_start)
 <LI><a href="#[63]">rstimer</a> from retrievedata.o(i.rstimer) referenced from retrievedata.o(i.RetrieveData_start)
 <LI><a href="#[ad]">rstimer_tu</a> from xnode.o(i.rstimer_tu) referenced from xnode.o(i.vAppMainTask)
 <LI><a href="#[74]">sctimer</a> from timesync.o(i.sctimer) referenced from timesync.o(i.SyncClock_init)
 <LI><a href="#[76]">sctimer_synch</a> from timesync.o(i.sctimer_synch) referenced from timesync.o(i.SyncClock_start)
 <LI><a href="#[9c]">sdmmc_irq</a> from fs_sdio.o(i.sdmmc_irq) referenced from fs_sdio.o(i.disk_initialize)
 <LI><a href="#[9e]">sdmmc_irq_driven_wait</a> from fs_sdio.o(i.sdmmc_irq_driven_wait) referenced from fs_sdio.o(i.disk_initialize)
 <LI><a href="#[9f]">sdmmc_setup_wakeup</a> from fs_sdio.o(i.sdmmc_setup_wakeup) referenced from fs_sdio.o(i.disk_initialize)
 <LI><a href="#[9d]">sdmmc_waitms</a> from fs_sdio.o(i.sdmmc_waitms) referenced from fs_sdio.o(i.disk_initialize)
 <LI><a href="#[7c]">sensingFunc</a> from remotesensing.o(i.sensingFunc) referenced from triggersensing.o(i.TriggerSensing)
 <LI><a href="#[7c]">sensingFunc</a> from remotesensing.o(i.sensingFunc) referenced from remotesensing.o(i.setparamsfunc)
 <LI><a href="#[a2]">sensingtimer</a> from sensing.o(i.sensingtimer) referenced from sensing.o(i.prvQueueSensingTask)
 <LI><a href="#[a2]">sensingtimer</a> from sensing.o(i.sensingtimer) referenced from sensing.o(i.setupAcquisition)
 <LI><a href="#[52]">setparamsexec</a> from remotesensing.o(i.setparamsexec) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[55]">setparamsfunc</a> from remotesensing.o(i.setparamsfunc) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[53]">setparamsresp</a> from remotesensing.o(i.setparamsresp) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[54]">setparamssent</a> from remotesensing.o(i.setparamssent) referenced from remotesensing.o(i.RemoteSensing_init)
 <LI><a href="#[6f]">smRecvTask</a> from sendsmsg.o(i.smRecvTask) referenced from sendsmsg.o(i.SendSMsg_init)
 <LI><a href="#[4e]">smcallback</a> from reliablecomm.o(i.smcallback) referenced from reliablecomm.o(i.ReliableComm_init)
 <LI><a href="#[6c]">smcallback</a> from sendsmsg.o(i.smcallback) referenced from sendsmsg.o(i.SendSMsg_init)
 <LI><a href="#[70]">syncclockexec</a> from timesync.o(i.syncclockexec) referenced from timesync.o(i.SyncClock_init)
 <LI><a href="#[73]">syncclockfunc</a> from timesync.o(i.syncclockfunc) referenced from timesync.o(i.SyncClock_init)
 <LI><a href="#[71]">syncclockresp</a> from timesync.o(i.syncclockresp) referenced from timesync.o(i.SyncClock_init)
 <LI><a href="#[72]">syncclocksent</a> from timesync.o(i.syncclocksent) referenced from timesync.o(i.SyncClock_init)
 <LI><a href="#[79]">trigsenesp</a> from triggersensing.o(i.trigsenesp) referenced from triggersensing.o(i.Trig_Init)
 <LI><a href="#[78]">trigsenexec</a> from triggersensing.o(i.trigsenexec) referenced from triggersensing.o(i.Trig_Init)
 <LI><a href="#[7b]">trigsenfunc</a> from triggersensing.o(i.trigsenfunc) referenced from triggersensing.o(i.Trig_Init)
 <LI><a href="#[7a]">trigsensent</a> from triggersensing.o(i.trigsensent) referenced from triggersensing.o(i.Trig_Init)
 <LI><a href="#[45]">utiltimer</a> from utils.o(i.utiltimer) referenced from utils.o(i.FRAUtil_ReadVoltage)
 <LI><a href="#[45]">utiltimer</a> from utils.o(i.utiltimer) referenced from utils.o(i.Util_ReadVoltage)
 <LI><a href="#[45]">utiltimer</a> from utils.o(i.utiltimer) referenced from utils.o(i.Util_ResetNodes)
 <LI><a href="#[90]">vAppMainTask</a> from xnode.o(i.vAppMainTask) referenced from xnode.o(i.c_entry)
 <LI><a href="#[7d]">voltexec</a> from utils.o(i.voltexec) referenced from utils.o(i.Util_Init)
 <LI><a href="#[80]">voltfunc</a> from utils.o(i.voltfunc) referenced from utils.o(i.Util_Init)
 <LI><a href="#[7e]">voltresp</a> from utils.o(i.voltresp) referenced from utils.o(i.Util_Init)
 <LI><a href="#[7f]">voltsent</a> from utils.o(i.voltsent) referenced from utils.o(i.Util_Init)
 <LI><a href="#[ac]">writeTask</a> from triggersensing.o(i.writeTask) referenced from triggersensing.o(i.trigsenfunc)
 <LI><a href="#[89]">xctimer</a> from settings.o(i.xctimer) referenced from settings.o(i.XnodeCfgSend)
 <LI><a href="#[8a]">xnodecfgexec</a> from settings.o(i.xnodecfgexec) referenced from settings.o(i.XnodeConfig_Init)
 <LI><a href="#[8d]">xnodecfgfunc</a> from settings.o(i.xnodecfgfunc) referenced from settings.o(i.XnodeConfig_Init)
 <LI><a href="#[8b]">xnodecfgresp</a> from settings.o(i.xnodecfgresp) referenced from settings.o(i.XnodeConfig_Init)
 <LI><a href="#[8c]">xnodecfgsent</a> from settings.o(i.xnodecfgsent) referenced from settings.o(i.XnodeConfig_Init)
 <LI><a href="#[b2]">yaffs2_ybicmp</a> from yaffs_yaffs2.o(i.yaffs2_ybicmp) referenced from yaffs_yaffs2.o(i.yaffs2_scan_backwards)
 <LI><a href="#[b8]">yaffs_nand_drv_CheckBad</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_CheckBad) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[ba]">yaffs_nand_drv_Deinitialise</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_Deinitialise) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[b6]">yaffs_nand_drv_EraseBlock</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_EraseBlock) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[b9]">yaffs_nand_drv_Initialise</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_Initialise) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[b7]">yaffs_nand_drv_MarkBad</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_MarkBad) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[b5]">yaffs_nand_drv_ReadChunk</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_ReadChunk) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[b4]">yaffs_nand_drv_WriteChunk</a> from yaffs_nand_drv.o(i.yaffs_nand_drv_WriteChunk) referenced from yaffs_nand_drv.o(i.yaffs_nand_install_drv)
 <LI><a href="#[bf]">yaffs_tags_compat_mark_bad</a> from yaffs_tagscompat.o(i.yaffs_tags_compat_mark_bad) referenced from yaffs_tagscompat.o(i.yaffs_tags_compat_install)
 <LI><a href="#[be]">yaffs_tags_compat_query_block</a> from yaffs_tagscompat.o(i.yaffs_tags_compat_query_block) referenced from yaffs_tagscompat.o(i.yaffs_tags_compat_install)
 <LI><a href="#[bd]">yaffs_tags_compat_rd</a> from yaffs_tagscompat.o(i.yaffs_tags_compat_rd) referenced from yaffs_tagscompat.o(i.yaffs_tags_compat_install)
 <LI><a href="#[bc]">yaffs_tags_compat_wr</a> from yaffs_tagscompat.o(i.yaffs_tags_compat_wr) referenced from yaffs_tagscompat.o(i.yaffs_tags_compat_install)
 <LI><a href="#[c3]">yaffs_tags_marshall_mark_bad</a> from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_mark_bad) referenced from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
 <LI><a href="#[c2]">yaffs_tags_marshall_query_block</a> from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_query_block) referenced from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
 <LI><a href="#[c1]">yaffs_tags_marshall_read</a> from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_read) referenced from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
 <LI><a href="#[c0]">yaffs_tags_marshall_write</a> from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_write) referenced from yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
 <LI><a href="#[b3]">yaffsfs_RemoveObjectCallback</a> from yaffsfs.o(i.yaffsfs_RemoveObjectCallback) referenced from yaffsfs.o(i.yaffs_add_device)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(.text)
</UL>
<P><STRONG><a name="[4d0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ee]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4d2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4d3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4d4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4d5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[36f]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[36e]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[364]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>vPortSVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>xPortPendSVHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[c9]"></a>xPortSysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[1b]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EZH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>M0CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>M0s_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>VADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>getPC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2da]"></a>arm_fir_decimate_f32</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, arm_fir_decimate_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arm_fir_decimate_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest
</UL>

<P><STRONG><a name="[ca]"></a>arm_fir_decimate_init_f32</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, arm_fir_decimate_init_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_fir_decimate_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest_SETUP
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOSWaitms
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ldivmod</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mean_calculate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
</UL>

<P><STRONG><a name="[4d6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medium_select
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[330]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
</UL>

<P><STRONG><a name="[347]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[d1]"></a>mktime</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin1
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;islongsleep
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackSensorData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packSensorData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sldiReorder
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_notice
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_ack
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_sendDone
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapMsgs
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_bcast
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_recv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssmiReorder
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_msg2dat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_dat2msg
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_init_chunk_hdr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_check_chunk_hdr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcfg_adxl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode_copy
</UL>

<P><STRONG><a name="[4d7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_mark_bad
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_spare_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_MarkBad
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[4d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeEndTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqMissingDataTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_SLDIReq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_CheckBad
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_init_f32
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[4da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[448]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
</UL>

<P><STRONG><a name="[2fe]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_oh_from_name
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_name_from_oh
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
</UL>

<P><STRONG><a name="[1e7]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[102]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>

<P><STRONG><a name="[43c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>

<P><STRONG><a name="[1e8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
</UL>

<P><STRONG><a name="[188]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
</UL>

<P><STRONG><a name="[2fa]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[1da]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[d6]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[d8]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[da]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[f0]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2ff]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_vcinfo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltexec
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[4db]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4dc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4dd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin1
</UL>

<P><STRONG><a name="[d2]"></a>_localtime</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[d9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[d7]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4de]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4df]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[dd]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4e0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[ef]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[4e1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>ADXL362_pin_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adxl362.o(i.ADXL362_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADXL362_pin_init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
</UL>

<P><STRONG><a name="[f4]"></a>ATCommandCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, 4gftp.o(i.ATCommandCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[f8]"></a>ATConnConfig</STRONG> (Thumb, 674 bytes, Stack size 400 bytes, 4gftp.o(i.ATConnConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[fb]"></a>ATEOFCheck</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, 4gftp.o(i.ATEOFCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ATEOFCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[fc]"></a>ATEchoCancel</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, 4gftp.o(i.ATEchoCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ATEchoCancel &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[fd]"></a>ATHarwareFlowControl</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, 4gftp.o(i.ATHarwareFlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ATHarwareFlowControl &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[fe]"></a>ATNumGet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 4gftp.o(i.ATNumGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATNumGet &rArr; lpc_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[ff]"></a>ATSwitchOff</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, 4gftp.o(i.ATSwitchOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ATSwitchOff &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[100]"></a>ATTCPClose</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, 4gftp.o(i.ATTCPClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ATTCPClose &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[101]"></a>ATTCPConnect</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, 4gftp.o(i.ATTCPConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = ATTCPConnect &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[103]"></a>ATTCPDataGet</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, 4gftp.o(i.ATTCPDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ATTCPDataGet &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[109]"></a>ATTCPPacketSize</STRONG> (Thumb, 70 bytes, Stack size 96 bytes, 4gftp.o(i.ATTCPPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ATTCPPacketSize &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[10a]"></a>ATTCPReceive</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, 4gftp.o(i.ATTCPReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ATTCPReceive &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[10b]"></a>ATTCPSend</STRONG> (Thumb, 82 bytes, Stack size 104 bytes, 4gftp.o(i.ATTCPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = ATTCPSend &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[10c]"></a>ATTimeGet</STRONG> (Thumb, 452 bytes, Stack size 168 bytes, 4gftp.o(i.ATTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ATTimeGet &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
</UL>

<P><STRONG><a name="[111]"></a>AutoMonitor_menu</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, automonitor.o(i.AutoMonitor_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = AutoMonitor_menu &rArr; AutoMonitor_writecfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[114]"></a>AutoMonitor_running</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, automonitor.o(i.AutoMonitor_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = AutoMonitor_running &rArr; AutoMonitor_writecfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[112]"></a>AutoMonitor_writecfg</STRONG> (Thumb, 86 bytes, Stack size 560 bytes, automonitor.o(i.AutoMonitor_writecfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = AutoMonitor_writecfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_menu
</UL>

<P><STRONG><a name="[1af]"></a>BCD2Dec</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.BCD2Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BCD2Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
</UL>

<P><STRONG><a name="[1b9]"></a>BitClear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.BitClear))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_clearflag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetContrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
</UL>

<P><STRONG><a name="[1b0]"></a>BitRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.BitRead))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
</UL>

<P><STRONG><a name="[1b1]"></a>BitSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.BitSet))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetContrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
</UL>

<P><STRONG><a name="[11b]"></a>CDC_BulkIn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cdcuser.o(i.CDC_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDC_BulkIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[11d]"></a>CDC_BulkOut</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdcuser.o(i.CDC_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CDC_BulkOut &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_WrOutBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[120]"></a>CDC_BulkOutNak</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cdcuser.o(i.CDC_BulkOutNak))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDC_BulkOutNak &rArr; USB_ReadReqEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[247]"></a>CDC_ClearCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_ClearCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[246]"></a>CDC_GetCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_GetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[245]"></a>CDC_GetEncapsulatedResponse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_GetEncapsulatedResponse))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[248]"></a>CDC_GetLineCoding</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_GetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[123]"></a>CDC_GetSerialState</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_GetSerialState))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_CheckSerialState
</UL>

<P><STRONG><a name="[122]"></a>CDC_Init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, cdcuser.o(i.CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetSerialState
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Init
</UL>

<P><STRONG><a name="[124]"></a>CDC_NotificationIn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cdcuser.o(i.CDC_NotificationIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_CheckSerialState
</UL>

<P><STRONG><a name="[265]"></a>CDC_OutBufAvailChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_OutBufAvailChar))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_GetChar
</UL>

<P><STRONG><a name="[266]"></a>CDC_RdOutBuf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cdcuser.o(i.CDC_RdOutBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_RdOutBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_GetChar
</UL>

<P><STRONG><a name="[24a]"></a>CDC_SendBreak</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_SendBreak))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[24b]"></a>CDC_SendEncapsulatedCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_SendEncapsulatedCommand))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[24c]"></a>CDC_SetCommFeature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_SetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[249]"></a>CDC_SetControlLineState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_SetControlLineState))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[24d]"></a>CDC_SetLineCoding</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cdcuser.o(i.CDC_SetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[11f]"></a>CDC_WrOutBuf</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, cdcuser.o(i.CDC_WrOutBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CDC_WrOutBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkOut
</UL>

<P><STRONG><a name="[125]"></a>CGU_ConfigPWR</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, lpc43xx_cgu.o(i.CGU_ConfigPWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = CGU_ConfigPWR &rArr;  CGU_ConfigPWR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetBaseStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_enable_clock
</UL>

<P><STRONG><a name="[127]"></a>CGU_EnableEntity</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, lpc43xx_cgu.o(i.CGU_EnableEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
</UL>

<P><STRONG><a name="[12d]"></a>CGU_EntityConnect</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lpc43xx_cgu.o(i.CGU_EntityConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[126]"></a>CGU_GetBaseStatus</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_GetBaseStatus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
</UL>

<P><STRONG><a name="[129]"></a>CGU_GetPCLKFrequency</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, lpc43xx_cgu.o(i.CGU_GetPCLKFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[12b]"></a>CGU_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc43xx_cgu.o(i.CGU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CGU_Init &rArr; CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetXTALOSC
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[252]"></a>CGU_SetPLL0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetPLL0))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[12e]"></a>CGU_SetPLL1</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lpc43xx_cgu.o(i.CGU_SetPLL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGU_SetPLL1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[12c]"></a>CGU_SetXTALOSC</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetXTALOSC))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[12a]"></a>CGU_UpdateClock</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, lpc43xx_cgu.o(i.CGU_UpdateClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGU_UpdateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[12f]"></a>CellOn</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, 4gftp.o(i.CellOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CellOn &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[132]"></a>CheckBatteryVoltage</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, snoozealarm.o(i.CheckBatteryVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CheckBatteryVoltage &rArr; PMIC_Status &rArr; PMIC_Write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Status
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltfunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
</UL>

<P><STRONG><a name="[136]"></a>ClockDrift_setClockDrift</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, globaltime.o(i.ClockDrift_setClockDrift))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>

<P><STRONG><a name="[137]"></a>ClockDrift_setClockOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, globaltime.o(i.ClockDrift_setClockOffset))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>

<P><STRONG><a name="[138]"></a>ClockDrift_setLastSyncTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, globaltime.o(i.ClockDrift_setLastSyncTime))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>

<P><STRONG><a name="[135]"></a>Compute_parameter</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, timesync.o(i.Compute_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Compute_parameter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockDrift_setLastSyncTime
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockDrift_setClockOffset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockDrift_setClockDrift
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tsc_cmd
</UL>

<P><STRONG><a name="[139]"></a>Creat_TimingMessage</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timesync.o(i.Creat_TimingMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Creat_TimingMessage &rArr; TimeSync_msg2dat
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_msg2dat
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Start
</UL>

<P><STRONG><a name="[1b8]"></a>Dec2BCD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.Dec2BCD))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
</UL>

<P><STRONG><a name="[238]"></a>EPAdr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(i.EPAdr))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[13b]"></a>FRAUtil_ReadVoltage</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, utils.o(i.FRAUtil_ReadVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = FRAUtil_ReadVoltage &rArr; Voltage_writedata_MQTT &rArr; ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[142]"></a>FRA_menu</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, settings.o(i.FRA_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = FRA_menu &rArr; ManualFTP &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND2SD
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[14e]"></a>FreeRTOSWaitms</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, timesync.o(i.FreeRTOSWaitms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
</UL>

<P><STRONG><a name="[2d]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, trx_access.o(i.GPIO3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, adxl362.o(i.GPIO6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ads131.o(i.GPIO7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>GPIO_ClearValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_R
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_G
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_B
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write12
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readDataPt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_pin_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_off
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_write
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_read
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_wake
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_sleep
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_reset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
</UL>

<P><STRONG><a name="[19e]"></a>GPIO_ReadValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_gpio.o(i.GPIO_ReadValue))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForBusy_READ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForBusy
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_SetDir</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc43xx_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_pin_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_pin_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
</UL>

<P><STRONG><a name="[130]"></a>GPIO_SetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_gpio.o(i.GPIO_SetValue))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_R
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_G
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_B
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write12
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readDataPt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_pin_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_off
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_write
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_read
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_wake
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_sleep
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_reset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
</UL>

<P><STRONG><a name="[14f]"></a>GenericComm_bcast</STRONG> (Thumb, 74 bytes, Stack size 136 bytes, genericcomm.o(i.GenericComm_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
</UL>

<P><STRONG><a name="[152]"></a>GenericComm_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, genericcomm.o(i.GenericComm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_short_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_channel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Init
</UL>

<P><STRONG><a name="[1c0]"></a>GenericComm_register</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, genericcomm.o(i.GenericComm_register))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Register
</UL>

<P><STRONG><a name="[157]"></a>GenericComm_send</STRONG> (Thumb, 104 bytes, Stack size 144 bytes, genericcomm.o(i.GenericComm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_bcast
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataSubTask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask2
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
</UL>

<P><STRONG><a name="[9a]"></a>GetChar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debug_frmwrk.o(i.GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetChar &rArr; VCOM_GetChar &rArr; VCOM_CheckSerialState &rArr; CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_menu
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharInNonBlock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[9b]"></a>GetCharInNonBlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debug_frmwrk.o(i.GetCharInNonBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetCharInNonBlock &rArr; GetChar &rArr; VCOM_GetChar &rArr; VCOM_CheckSerialState &rArr; CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[15b]"></a>GetClkSel</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_lpc43xx.o(i.GetClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[159]"></a>GetClockFreq</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, system_lpc43xx.o(i.GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetClockFreq &rArr; GetPLL1Param
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLL1Param
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClkSel
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[15a]"></a>GetPLL1Param</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_lpc43xx.o(i.GetPLL1Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPLL1Param
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[15d]"></a>GlobalTime_get64</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, globaltime.o(i.GlobalTime_get64))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GlobalTime_get64 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime_get64
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[1a2]"></a>I2C_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Init
</UL>

<P><STRONG><a name="[15f]"></a>I2C_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lpc43xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Init &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Init
</UL>

<P><STRONG><a name="[160]"></a>I2C_IntCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lpc43xx_i2c.o(i.I2C_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[163]"></a>I2C_MasterTransferData</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, lpc43xx_i2c.o(i.I2C_MasterTransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Read
</UL>

<P><STRONG><a name="[169]"></a>LED_B</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_B
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
</UL>

<P><STRONG><a name="[16a]"></a>LED_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_G
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
</UL>

<P><STRONG><a name="[16b]"></a>LED_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Init &rArr; LED_Off &rArr; LED_RGB &rArr; LED_R
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[16c]"></a>LED_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Off &rArr; LED_RGB &rArr; LED_R
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveresp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataresp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgresp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[16e]"></a>LED_R</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_R
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
</UL>

<P><STRONG><a name="[16d]"></a>LED_RGB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, led.o(i.LED_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_RGB &rArr; LED_R
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_R
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_G
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_B
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[15e]"></a>LocalTime_get64</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, localtime.o(i.LocalTime_get64))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LocalTime_get64 &rArr; SysTime_get64
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_get64
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_interrupt_poll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[170]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[173]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
</UL>

<P><STRONG><a name="[176]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
</UL>

<P><STRONG><a name="[177]"></a>MQTTPacket_decode</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[172]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>

<P><STRONG><a name="[17c]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[17a]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[178]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[179]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[181]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
</UL>

<P><STRONG><a name="[182]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[183]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
</UL>

<P><STRONG><a name="[184]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[185]"></a>MQTT_Connect</STRONG> (Thumb, 404 bytes, Stack size 264 bytes, 4gftp.o(i.MQTT_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = MQTT_Connect &rArr; ATTCPSend &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[187]"></a>MQTT_Publish</STRONG> (Thumb, 220 bytes, Stack size 184 bytes, 4gftp.o(i.MQTT_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = MQTT_Publish &rArr; ATTCPSend &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[189]"></a>MQTT_Subscribe</STRONG> (Thumb, 382 bytes, Stack size 184 bytes, 4gftp.o(i.MQTT_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = MQTT_Subscribe &rArr; ATTCPSend &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
</UL>

<P><STRONG><a name="[180]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[14b]"></a>ManualFTP</STRONG> (Thumb, 1404 bytes, Stack size 856 bytes, 4gftp.o(i.ManualFTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176<LI>Call Chain = ManualFTP &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND2SD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATNumGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[148]"></a>NAND2SD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(i.NAND2SD))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[196]"></a>NandFlash_BlockErase</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NandFlash_BlockErase &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[199]"></a>NandFlash_Init</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NandFlash_Init &rArr; NandFlash_ValidBlockCheck &rArr; NandFlash_PageRead &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_ValidBlockCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[19b]"></a>NandFlash_PageProgram</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_PageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NandFlash_PageProgram &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[19c]"></a>NandFlash_PageRead</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_PageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NandFlash_PageRead &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_ValidBlockCheck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWakeTime
</UL>

<P><STRONG><a name="[198]"></a>NandFlash_ReadStatus</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NandFlash_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
</UL>

<P><STRONG><a name="[19a]"></a>NandFlash_ValidBlockCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_ValidBlockCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NandFlash_ValidBlockCheck &rArr; NandFlash_PageRead &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
</UL>

<P><STRONG><a name="[19d]"></a>NandFlash_WaitForBusy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_WaitForBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NandFlash_WaitForBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
</UL>

<P><STRONG><a name="[19f]"></a>NandFlash_WaitForBusy_READ</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_WaitForBusy_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NandFlash_WaitForBusy_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
</UL>

<P><STRONG><a name="[197]"></a>NandFlash_WaitForReady</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nandflash_k9f1g08u0a.o(i.NandFlash_WaitForReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
</UL>

<P><STRONG><a name="[116]"></a>NodeReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nodereset.o(i.NodeReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveresp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataresp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCWriteTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgresp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltresp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetresp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer_tu
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockresp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer
</UL>

<P><STRONG><a name="[1a1]"></a>NodeReset_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, nodereset.o(i.NodeReset_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NodeReset_Init &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[133]"></a>PMIC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pmic.o(i.PMIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PMIC_Init &rArr; I2C_Init &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
</UL>

<P><STRONG><a name="[1a3]"></a>PMIC_Read</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, pmic.o(i.PMIC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PMIC_Read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Status
</UL>

<P><STRONG><a name="[134]"></a>PMIC_Status</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, pmic.o(i.PMIC_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PMIC_Status &rArr; PMIC_Write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltConv_diff
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltConv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
</UL>

<P><STRONG><a name="[1a4]"></a>PMIC_Write</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, pmic.o(i.PMIC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PMIC_Write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Status
</UL>

<P><STRONG><a name="[1a7]"></a>PackAndSave</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, remotesensing.o(i.PackAndSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 3048<LI>Call Chain = PackAndSave &rArr; WriteToNAND &rArr; yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[93]"></a>PutChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_frmwrk.o(i.PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PutChar &rArr; VCOM_PutChar &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDec32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDec16
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDec
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[97]"></a>PutDec</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, debug_frmwrk.o(i.PutDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PutDec &rArr; PutChar &rArr; VCOM_PutChar &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[98]"></a>PutDec16</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, debug_frmwrk.o(i.PutDec16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PutDec16 &rArr; PutChar &rArr; VCOM_PutChar &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[99]"></a>PutDec32</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, debug_frmwrk.o(i.PutDec32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PutDec32 &rArr; PutChar &rArr; VCOM_PutChar &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[94]"></a>PutHex</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, debug_frmwrk.o(i.PutHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PutHex &rArr; Puts &rArr; VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[95]"></a>PutHex16</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, debug_frmwrk.o(i.PutHex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PutHex16 &rArr; Puts &rArr; VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[96]"></a>PutHex32</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, debug_frmwrk.o(i.PutHex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PutHex32 &rArr; Puts &rArr; VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[91]"></a>Puts</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debug_frmwrk.o(i.Puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Puts &rArr; VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts_
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutHex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[92]"></a>Puts_</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, debug_frmwrk.o(i.Puts_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Puts_ &rArr; Puts &rArr; VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[220]"></a>RIT_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_rit.o(i.RIT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[15]"></a>RIT_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systime.o(i.RIT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>RIT_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_rit.o(i.RIT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[10f]"></a>RTCS_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(i.RTCS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTCS_Init &rArr; I2C_Init &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Reconfigure
</UL>

<P><STRONG><a name="[1fb]"></a>RTC_AlarmControl</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtc.o(i.RTC_AlarmControl))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1ad]"></a>RTC_Read</STRONG> (Thumb, 800 bytes, Stack size 72 bytes, rtc.o(i.RTC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTC_Read &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitRead
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2Dec
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[1b2]"></a>RTC_Reconfigure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, triggersensing.o(i.RTC_Reconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_Reconfigure &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[1b3]"></a>RTC_SetAging</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetAging))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_SetAging &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1b5]"></a>RTC_SetAin1</STRONG> (Thumb, 208 bytes, Stack size 152 bytes, rtc.o(i.RTC_SetAin1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1b6]"></a>RTC_SetAin2</STRONG> (Thumb, 178 bytes, Stack size 144 bytes, rtc.o(i.RTC_SetAin2))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RTC_SetAin2 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1b7]"></a>RTC_SetAlarm1</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetAlarm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_SetAlarm1 &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2BCD
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1ba]"></a>RTC_SetAlarm2</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetAlarm2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_SetAlarm2 &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2BCD
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[110]"></a>RTC_SetClock</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_SetClock &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dec2BCD
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitClear
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
</UL>

<P><STRONG><a name="[1bb]"></a>RTC_SetContrl</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, rtc.o(i.RTC_SetContrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_SetContrl &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitSet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[1bc]"></a>RTC_clearflag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc.o(i.RTC_clearflag))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_clearflag &rArr; rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[221]"></a>RealTimer_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systime.o(i.RealTimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RealTimer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timesync_Init
</UL>

<P><STRONG><a name="[1bd]"></a>ReliableComm_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, reliablecomm.o(i.ReliableComm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_register
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Init
</UL>

<P><STRONG><a name="[50]"></a>ReliableComm_receive</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, remotecommand.o(i.ReliableComm_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ReliableComm_receive &rArr; executeCmd &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executionDone
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotecommand.o(i.RemoteCommand_init)
</UL>
<P><STRONG><a name="[1d1]"></a>ReliableComm_register</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, reliablecomm.o(i.ReliableComm_register))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
</UL>

<P><STRONG><a name="[1c3]"></a>ReliableComm_reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, reliablecomm.o(i.ReliableComm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
</UL>

<P><STRONG><a name="[1c6]"></a>ReliableComm_send</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, reliablecomm.o(i.ReliableComm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_isBusy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_isBusy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_bcast
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcSend
</UL>

<P><STRONG><a name="[51]"></a>ReliableComm_sendDone</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, remotecommand.o(i.ReliableComm_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ReliableComm_sendDone &rArr; clearState &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotecommand.o(i.RemoteCommand_init)
</UL>
<P><STRONG><a name="[1cd]"></a>RemoteCommand_done</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, remotecommand.o(i.RemoteCommand_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapMsgs
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcSend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrievefunc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetfunc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatafunc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgfunc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltfunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetfunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenfunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
</UL>

<P><STRONG><a name="[13f]"></a>RemoteCommand_execute</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, remotecommand.o(i.RemoteCommand_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
</UL>

<P><STRONG><a name="[1d0]"></a>RemoteCommand_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, remotecommand.o(i.RemoteCommand_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_register
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeConfig_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Init
</UL>

<P><STRONG><a name="[1d4]"></a>RemoteCommand_register</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, remotecommand.o(i.RemoteCommand_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RemoteCommand_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeConfig_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Init
</UL>

<P><STRONG><a name="[1d2]"></a>RemoteCommand_stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, remotecommand.o(i.RemoteCommand_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xctimer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utiltimer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockexec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_synch
</UL>

<P><STRONG><a name="[1d3]"></a>RemoteSensing_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, remotesensing.o(i.RemoteSensing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = RemoteSensing_init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timesync_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[113]"></a>RemoteSensing_menu</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, remotesensing.o(i.RemoteSensing_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = RemoteSensing_menu &rArr; RemoteSensing_start &rArr; Util_ResetNodes &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_menu
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1d8]"></a>RemoteSensing_setparams</STRONG> (Thumb, 1344 bytes, Stack size 584 bytes, settings.o(i.RemoteSensing_setparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = RemoteSensing_setparams &rArr; doreadcfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
</UL>

<P><STRONG><a name="[1d7]"></a>RemoteSensing_start</STRONG> (Thumb, 902 bytes, Stack size 56 bytes, remotesensing.o(i.RemoteSensing_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = RemoteSensing_start &rArr; Util_ResetNodes &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_vcinfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
</UL>

<P><STRONG><a name="[1de]"></a>RemoteSensing_writedata</STRONG> (Thumb, 264 bytes, Stack size 584 bytes, remotesensing.o(i.RemoteSensing_writedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = RemoteSensing_writedata &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
</UL>

<P><STRONG><a name="[1e2]"></a>RetrieveData_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retrievedata.o(i.RetrieveData_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = RetrieveData_init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[14c]"></a>RetrieveData_menu</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, retrievedata.o(i.RetrieveData_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = RetrieveData_menu &rArr; SyncClock_start &rArr; reportMQTT &rArr; ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1e3]"></a>RetrieveData_start</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, retrievedata.o(i.RetrieveData_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = RetrieveData_start &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
</UL>

<P><STRONG><a name="[1e4]"></a>SDCard_Init</STRONG> (Thumb, 6028 bytes, Stack size 936 bytes, sdcard.o(i.SDCard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = SDCard_Init &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[1e9]"></a>SDCard_ReWrite</STRONG> (Thumb, 126 bytes, Stack size 264 bytes, sdcard.o(i.SDCard_ReWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SDCard_ReWrite &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[1ea]"></a>SDCard_ReWriteALL</STRONG> (Thumb, 130 bytes, Stack size 272 bytes, sdcard.o(i.SDCard_ReWriteALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SDCard_ReWriteALL &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
</UL>

<P><STRONG><a name="[1eb]"></a>SDCard_ReWriteCN</STRONG> (Thumb, 2492 bytes, Stack size 808 bytes, sdcard.o(i.SDCard_ReWriteCN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = SDCard_ReWriteCN &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
</UL>

<P><STRONG><a name="[10]"></a>SDIO_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc43xx_sdif.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a3]"></a>SDRAM_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sdmalloc.o(i.SDRAM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[1ec]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_spi_init
</UL>

<P><STRONG><a name="[286]"></a>SPI_ReceiveByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi.o(i.SPI_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readDataPt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_packet
</UL>

<P><STRONG><a name="[287]"></a>SPI_SendByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi.o(i.SPI_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write12
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
</UL>

<P><STRONG><a name="[28f]"></a>SPI_TransferByte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi.o(i.SPI_TransferByte))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
</UL>

<P><STRONG><a name="[1ee]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1ed]"></a>SSP_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lpc43xx_ssp.o(i.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1ef]"></a>SendLData_SLDIAlloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sendldata.o(i.SendLData_SLDIAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_SLDIReq
</UL>

<P><STRONG><a name="[1ca]"></a>SendLData_bcast</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, sendldata.o(i.SendLData_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SendLData_bcast &rArr; nodeInqTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_isBusy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
</UL>

<P><STRONG><a name="[1bf]"></a>SendLData_init</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, sendldata.o(i.SendLData_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SendLData_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_register
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
</UL>

<P><STRONG><a name="[1c8]"></a>SendLData_isBusy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sendldata.o(i.SendLData_isBusy))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
</UL>

<P><STRONG><a name="[1c5]"></a>SendLData_reset</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, sendldata.o(i.SendLData_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SendLData_reset &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_reset
</UL>

<P><STRONG><a name="[1cb]"></a>SendLData_send</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, sendldata.o(i.SendLData_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SendLData_send &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_isBusy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
</UL>

<P><STRONG><a name="[1be]"></a>SendSMsg_init</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, sendsmsg.o(i.SendSMsg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_register
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
</UL>

<P><STRONG><a name="[1c7]"></a>SendSMsg_isBusy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sendsmsg.o(i.SendSMsg_isBusy))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>

<P><STRONG><a name="[1c4]"></a>SendSMsg_reset</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, sendsmsg.o(i.SendSMsg_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_reset
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
</UL>

<P><STRONG><a name="[1c9]"></a>SendSMsg_send</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, sendsmsg.o(i.SendSMsg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_isBusy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
</UL>

<P><STRONG><a name="[1f7]"></a>SetClock</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, system_lpc43xx.o(i.SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f8]"></a>Settings_menu</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, settings.o(i.Settings_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = Settings_menu &rArr; RemoteSensing_setparams &rArr; doreadcfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenSetup
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1a0]"></a>SnoozeAlarm_Sleep</STRONG> (Thumb, 404 bytes, Stack size 72 bytes, snoozealarm.o(i.SnoozeAlarm_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_clearflag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetContrl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAging
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmControl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[261]"></a>SnoozeAlarm_Wake</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, snoozealarm.o(i.SnoozeAlarm_Wake))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
</UL>

<P><STRONG><a name="[13c]"></a>SyncClock_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timesync.o(i.SyncClock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = SyncClock_init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
</UL>

<P><STRONG><a name="[13d]"></a>SyncClock_start</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, timesync.o(i.SyncClock_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = SyncClock_start &rArr; reportMQTT &rArr; ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>SysTime_get64</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, systime.o(i.SysTime_get64))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTime_get64
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime_get64
</UL>

<P><STRONG><a name="[1fe]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_lpc43xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; GetClockFreq &rArr; GetPLL1Param
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ff]"></a>SystemInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, system_lpc43xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemInit &rArr; SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPC
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[201]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 1242 bytes, Stack size 56 bytes, system_lpc43xx.o(i.SystemInit_ExtMemCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[208]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[207]"></a>TIM_ConfigMatch</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, lpc43xx_timer.o(i.TIM_ConfigMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[203]"></a>TIM_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lpc43xx_timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; getPClock &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[209]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.TIM_ResetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[f6]"></a>TIM_Waitms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc43xx_timer.o(i.TIM_Waitms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOSWaitms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_startSensing
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_readid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_on
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcRecvTask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[206]"></a>TIM_Waitus</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, lpc43xx_timer.o(i.TIM_Waitus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_waitms
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_reset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
</UL>

<P><STRONG><a name="[20c]"></a>TimeSync_GetConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timesync.o(i.TimeSync_GetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Register
</UL>

<P><STRONG><a name="[20a]"></a>TimeSync_Register</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timesync.o(i.TimeSync_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = TimeSync_Register &rArr; init_TimeSync_Buffer &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_register
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_NodeStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_GetConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeSync_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timesync_Init
</UL>

<P><STRONG><a name="[1db]"></a>TimeSync_Start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timesync.o(i.TimeSync_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = TimeSync_Start &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_bcast
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_TimingMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
</UL>

<P><STRONG><a name="[20e]"></a>TimeSync_dat2msg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timesync.o(i.TimeSync_dat2msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeSync_dat2msg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tsc_cmd
</UL>

<P><STRONG><a name="[13a]"></a>TimeSync_msg2dat</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timesync.o(i.TimeSync_msg2dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeSync_msg2dat
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_TimingMessage
</UL>

<P><STRONG><a name="[21b]"></a>TimerStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sendsmsg.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = TimerStop &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
</UL>

<P><STRONG><a name="[1f0]"></a>Timer_start</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, reliablecomm.o(i.Timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckUnicastTask
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>

<P><STRONG><a name="[1f4]"></a>Timer_stop</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, reliablecomm.o(i.Timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_reset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask2
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[1d5]"></a>Timesync_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timesync.o(i.Timesync_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Timesync_Init &rArr; TimeSync_Register &rArr; init_TimeSync_Buffer &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Register
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_init
</UL>

<P><STRONG><a name="[222]"></a>TrigSenCfgSend</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, triggersensing.o(i.TrigSenCfgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = TrigSenCfgSend &rArr; SDCard_Init &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcfg_adxl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1f9]"></a>TrigSenSetup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, triggersensing.o(i.TrigSenSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = TrigSenSetup &rArr; writecfg_adxl &rArr; SDCard_ReWrite &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcfg_adxl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
</UL>

<P><STRONG><a name="[225]"></a>Trig_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, triggersensing.o(i.Trig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Trig_Init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[226]"></a>TriggerSensing</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, triggersensing.o(i.TriggerSensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TriggerSensing &rArr; setupAcquisition &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAcquisition
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupChannel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_enable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcfg_adxl
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[18c]"></a>UARTOn</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 4gftp.o(i.UARTOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UARTOn &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[22e]"></a>UART_ConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
</UL>

<P><STRONG><a name="[231]"></a>UART_FIFOConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_FIFOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
</UL>

<P><STRONG><a name="[230]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_FIFOConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
</UL>

<P><STRONG><a name="[22f]"></a>UART_Init</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, lpc43xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
</UL>

<P><STRONG><a name="[108]"></a>UART_Receive</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, lpc43xx_uart.o(i.UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>

<P><STRONG><a name="[234]"></a>UART_ReceiveByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[10e]"></a>UART_Send</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, lpc43xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Send &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
</UL>

<P><STRONG><a name="[235]"></a>UART_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[232]"></a>UART_TxCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
</UL>

<P><STRONG><a name="[12]"></a>USB0_IRQHandler</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, usbhw.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB0_IRQHandler &rArr; USB_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[250]"></a>USB_ClrStallEP</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usbhw.o(i.USB_ClrStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[237]"></a>USB_ConfigEP</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, usbhw.o(i.USB_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[258]"></a>USB_Configure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[243]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(i.USB_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[264]"></a>USB_Connect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhw.o(i.USB_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Connect
</UL>

<P><STRONG><a name="[239]"></a>USB_DataInStage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[23a]"></a>USB_DataOutStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[23c]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[257]"></a>USB_DisableEP</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbhw.o(i.USB_DisableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[259]"></a>USB_EnableEP</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbhw.o(i.USB_EnableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[86]"></a>USB_EndPoint0</STRONG> (Thumb, 882 bytes, Stack size 8 bytes, usbcore.o(i.USB_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_EndPoint0 &rArr; USB_ReqSetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetDescriptor
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_SetLineCoding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_SetControlLineState
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_SetCommFeature
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_SendEncapsulatedCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_SendBreak
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetLineCoding
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetEncapsulatedResponse
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetCommFeature
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ClearCommFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcom.o(i.VCOM_Init)
</UL>
<P><STRONG><a name="[87]"></a>USB_EndPoint1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbuser.o(i.USB_EndPoint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_EndPoint1 &rArr; CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_NotificationIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetSerialState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcom.o(i.VCOM_Init)
</UL>
<P><STRONG><a name="[88]"></a>USB_EndPoint2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbuser.o(i.USB_EndPoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_EndPoint2 &rArr; CDC_BulkOutNak &rArr; USB_ReadReqEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkOutNak
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkOut
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcom.o(i.VCOM_Init)
</UL>
<P><STRONG><a name="[251]"></a>USB_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, usbhw.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_Init &rArr; CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL0
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Init
</UL>

<P><STRONG><a name="[253]"></a>USB_ProgDTD</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usbhw.o(i.USB_ProgDTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>

<P><STRONG><a name="[11e]"></a>USB_ReadEP</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, usbhw.o(i.USB_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkOut
</UL>

<P><STRONG><a name="[121]"></a>USB_ReadReqEP</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usbhw.o(i.USB_ReadReqEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_ReadReqEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkOutNak
</UL>

<P><STRONG><a name="[254]"></a>USB_ReadSetupPkt</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, usbhw.o(i.USB_ReadSetupPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
</UL>

<P><STRONG><a name="[240]"></a>USB_ReqGetDescriptor</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, usbcore.o(i.USB_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[23d]"></a>USB_ReqGetStatus</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, usbcore.o(i.USB_ReqGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[23e]"></a>USB_ReqSetClrFeature</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, usbcore.o(i.USB_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReqSetClrFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTestMode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[242]"></a>USB_ReqSetConfiguration</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, usbcore.o(i.USB_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ReqSetConfiguration &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[244]"></a>USB_ReqSetInterface</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, usbcore.o(i.USB_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ReqSetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[236]"></a>USB_Reset</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, usbhw.o(i.USB_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>USB_ResetCore</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbcore.o(i.USB_ResetCore))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[25a]"></a>USB_ResetEP</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbhw.o(i.USB_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[85]"></a>USB_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbuser.o(i.USB_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcom.o(i.VCOM_Init)
</UL>
<P><STRONG><a name="[24f]"></a>USB_SetAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[241]"></a>USB_SetStallEP</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[256]"></a>USB_SetTestMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[23b]"></a>USB_SetupStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetupStage &rArr; USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[23f]"></a>USB_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[24e]"></a>USB_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[255]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[11c]"></a>USB_WriteEP</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbhw.o(i.USB_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_NotificationIn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_PutChar
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_BulkIn
</UL>

<P><STRONG><a name="[14d]"></a>UpdateParamMQTT</STRONG> (Thumb, 856 bytes, Stack size 584 bytes, 4gftp.o(i.UpdateParamMQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = UpdateParamMQTT &rArr; SDCard_ReWriteCN &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATNumGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[25c]"></a>Update_LocalParameter</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, timesync.o(i.Update_LocalParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Update_LocalParameter &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medium_select
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mean_calculate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tsc_cmd
</UL>

<P><STRONG><a name="[25f]"></a>Util_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, utils.o(i.Util_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Util_Init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[260]"></a>Util_ReadVoltage</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, utils.o(i.Util_ReadVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Util_ReadVoltage &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1dc]"></a>Util_ResetNodes</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, utils.o(i.Util_ResetNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Util_ResetNodes &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>

<P><STRONG><a name="[1d6]"></a>Util_Wakeup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, utils.o(i.Util_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Util_Wakeup &rArr; lpc_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Wake
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
</UL>

<P><STRONG><a name="[262]"></a>VCOM_CheckSerialState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vcom.o(i.VCOM_CheckSerialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VCOM_CheckSerialState &rArr; CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_NotificationIn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_GetSerialState
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_GetChar
</UL>

<P><STRONG><a name="[263]"></a>VCOM_Connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vcom.o(i.VCOM_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VCOM_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[158]"></a>VCOM_GetChar</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vcom.o(i.VCOM_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VCOM_GetChar &rArr; VCOM_CheckSerialState &rArr; CDC_NotificationIn &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_RdOutBuf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_OutBufAvailChar
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_CheckSerialState
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[267]"></a>VCOM_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, vcom.o(i.VCOM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VCOM_Init &rArr; USB_Init &rArr; CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[1ab]"></a>VCOM_PutChar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vcom.o(i.VCOM_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VCOM_PutChar &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[1ac]"></a>VCOM_Write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vcom.o(i.VCOM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VCOM_Write &rArr; USB_WriteEP &rArr; USB_ProgDTD
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Puts
</UL>

<P><STRONG><a name="[1a6]"></a>VoltConv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pmic.o(i.VoltConv))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Status
</UL>

<P><STRONG><a name="[1a5]"></a>VoltConv_diff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pmic.o(i.VoltConv_diff))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_Status
</UL>

<P><STRONG><a name="[141]"></a>Voltage_writedata_MQTT</STRONG> (Thumb, 472 bytes, Stack size 312 bytes, 4gftp.o(i.Voltage_writedata_MQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = Voltage_writedata_MQTT &rArr; ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATNumGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
</UL>

<P><STRONG><a name="[268]"></a>WWDT_Configure</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, lpc43xx_wwdt.o(i.WWDT_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WWDT_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtInit
</UL>

<P><STRONG><a name="[26b]"></a>WWDT_Feed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc43xx_wwdt.o(i.WWDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedwdt
</UL>

<P><STRONG><a name="[36c]"></a>WWDT_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_wwdt.o(i.WWDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtInit
</UL>

<P><STRONG><a name="[269]"></a>WWDT_SetTimeOut</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc43xx_wwdt.o(i.WWDT_SetTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Configure
</UL>

<P><STRONG><a name="[26a]"></a>WWDT_Start</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lpc43xx_wwdt.o(i.WWDT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WWDT_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtInit
</UL>

<P><STRONG><a name="[1a9]"></a>WriteToNAND</STRONG> (Thumb, 244 bytes, Stack size 320 bytes, remotesensing.o(i.WriteToNAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = WriteToNAND &rArr; yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND2SD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveexec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
</UL>

<P><STRONG><a name="[1aa]"></a>WriteToSD</STRONG> (Thumb, 182 bytes, Stack size 624 bytes, remotesensing.o(i.WriteToSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = WriteToSD &rArr; readidx &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveexec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
</UL>

<P><STRONG><a name="[b1]"></a>XCWriteTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i.XCWriteTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = XCWriteTask &rArr; xcwritefunc &rArr; SDCard_ReWriteALL &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.xnodecfgfunc)
</UL>
<P><STRONG><a name="[270]"></a>XnodeCfgSend</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, settings.o(i.XnodeCfgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = XnodeCfgSend &rArr; RemoteCommand_execute &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
</UL>

<P><STRONG><a name="[271]"></a>XnodeCfgSend_init</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, settings.o(i.XnodeCfgSend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = XnodeCfgSend_init &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
</UL>

<P><STRONG><a name="[272]"></a>XnodeCfg_setparams</STRONG> (Thumb, 634 bytes, Stack size 576 bytes, settings.o(i.XnodeCfg_setparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = XnodeCfg_setparams &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
</UL>

<P><STRONG><a name="[1fa]"></a>XnodeCfg_settings</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, settings.o(i.XnodeCfg_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = XnodeCfg_settings &rArr; XnodeCfg_setparams &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
</UL>

<P><STRONG><a name="[273]"></a>XnodeConfig_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i.XnodeConfig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = XnodeConfig_Init &rArr; RemoteCommand_init &rArr; ReliableComm_init &rArr; SendSMsg_init &rArr; GenericComm_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_register
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[274]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e3]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[fa]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[4e4]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4e5]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[276]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e6]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[186]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[4e7]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4e8]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[277]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e9]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4ea]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2ef]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>

<P><STRONG><a name="[4eb]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4ce]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[4ec]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[4ed]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4ee]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[227]"></a>ads131_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ads131.o(i.ads131_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ads131_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_pin_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_int_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_int_enable
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[27d]"></a>ads131_int_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ads131.o(i.ads131_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
</UL>

<P><STRONG><a name="[280]"></a>ads131_int_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ads131.o(i.ads131_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
</UL>

<P><STRONG><a name="[27f]"></a>ads131_int_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ads131.o(i.ads131_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads131_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
</UL>

<P><STRONG><a name="[281]"></a>ads131_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ads131.o(i.ads131_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads131_off
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[228]"></a>ads131_on</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ads131.o(i.ads131_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ads131_on &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[27e]"></a>ads131_pin_init</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, ads131.o(i.ads131_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ads131_pin_init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
</UL>

<P><STRONG><a name="[285]"></a>ads131_readDataPt</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, ads131.o(i.ads131_readDataPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ads131_readDataPt
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[284]"></a>ads131_readReg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ads131.o(i.ads131_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ads131_readReg
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupDAQ
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupCh
</UL>

<P><STRONG><a name="[282]"></a>ads131_sendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ads131.o(i.ads131_sendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ads131_sendCommand &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_startSensing
</UL>

<P><STRONG><a name="[288]"></a>ads131_setupCh</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, ads131.o(i.ads131_setupCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ads131_setupCh &rArr; ads131_writeReg &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupChannel
</UL>

<P><STRONG><a name="[289]"></a>ads131_setupDAQ</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ads131.o(i.ads131_setupDAQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ads131_setupDAQ &rArr; ads131_writeReg &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_writeReg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
</UL>

<P><STRONG><a name="[28a]"></a>ads131_startSensing</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads131.o(i.ads131_startSensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ads131_startSensing &rArr; ads131_sendCommand &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_sendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[283]"></a>ads131_writeReg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ads131.o(i.ads131_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ads131_writeReg &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupDAQ
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupCh
</UL>

<P><STRONG><a name="[28b]"></a>adxl362_FIFO_config</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, adxl362.o(i.adxl362_FIFO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adxl362_FIFO_config &rArr; adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[28e]"></a>adxl362_FIFOread</STRONG> (Thumb, 170 bytes, Stack size 1040 bytes, adxl362.o(i.adxl362_FIFOread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = adxl362_FIFOread
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferByte
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertFIFOdata
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
</UL>

<P><STRONG><a name="[291]"></a>adxl362_act_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, adxl362.o(i.adxl362_act_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adxl362_act_int &rArr; adxl362_write12
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write12
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[293]"></a>adxl362_clearirq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adxl362.o(i.adxl362_clearirq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adxl362_clearirq &rArr; adxl362_read8
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl_inact_setup
</UL>

<P><STRONG><a name="[294]"></a>adxl362_disableint</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adxl362.o(i.adxl362_disableint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adxl362_disableint &rArr; adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl_inact_setup
</UL>

<P><STRONG><a name="[295]"></a>adxl362_filter_ctl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, adxl362.o(i.adxl362_filter_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adxl362_filter_ctl &rArr; adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[296]"></a>adxl362_inact_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, adxl362.o(i.adxl362_inact_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adxl362_inact_int &rArr; adxl362_write12
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write12
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[297]"></a>adxl362_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, adxl362.o(i.adxl362_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = adxl362_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_disable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_pin_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
</UL>

<P><STRONG><a name="[298]"></a>adxl362_int_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adxl362.o(i.adxl362_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
</UL>

<P><STRONG><a name="[22c]"></a>adxl362_int_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adxl362.o(i.adxl362_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[22b]"></a>adxl362_int_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adxl362.o(i.adxl362_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adxl362_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[299]"></a>adxl362_int_setup</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, adxl362.o(i.adxl362_int_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adxl362_int_setup &rArr; adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl_inact_setup
</UL>

<P><STRONG><a name="[29a]"></a>adxl362_motiondetection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adxl362.o(i.adxl362_motiondetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adxl362_motiondetection &rArr; adxl362_read8
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[28c]"></a>adxl362_read8</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adxl362.o(i.adxl362_read8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adxl362_read8
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferByte
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_startSensing
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_readid
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_motiondetection
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_inact_int
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_filter_ctl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_clearirq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_act_int
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFO_config
</UL>

<P><STRONG><a name="[29b]"></a>adxl362_readid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adxl362.o(i.adxl362_readid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adxl362_readid &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[1fc]"></a>adxl362_setup</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, triggersensing.o(i.adxl362_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = adxl362_setup &rArr; adxl362_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_startSensing
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_readid
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_setup
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_inact_int
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_filter_ctl
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_act_int
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTask
</UL>

<P><STRONG><a name="[29c]"></a>adxl362_startSensing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adxl362.o(i.adxl362_startSensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adxl362_startSensing &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_write8
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
</UL>

<P><STRONG><a name="[292]"></a>adxl362_write12</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adxl362.o(i.adxl362_write12))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adxl362_write12
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_inact_int
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_act_int
</UL>

<P><STRONG><a name="[28d]"></a>adxl362_write8</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adxl362.o(i.adxl362_write8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_startSensing
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_setup
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_inact_int
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_filter_ctl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_disableint
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_act_int
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFO_config
</UL>

<P><STRONG><a name="[29d]"></a>adxl_inact_setup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, triggersensing.o(i.adxl_inact_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adxl_inact_setup &rArr; adxl362_int_setup &rArr; adxl362_write8
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_int_setup
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_disableint
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_clearirq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[29e]"></a>app_gateway</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, app_gateway.o(i.app_gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = app_gateway &rArr; FRA_menu &rArr; ManualFTP &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[29f]"></a>app_main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3200<LI>Call Chain = app_main &rArr; app_gateway &rArr; FRA_menu &rArr; ManualFTP &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[47]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[2a2]"></a>c_entry</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, xnode.o(i.c_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = c_entry &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c0]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[a0]"></a>compare</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, timesync.o(i.compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.medium_select)
</UL>
<P><STRONG><a name="[290]"></a>convertFIFOdata</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adxl362.o(i.convertFIFOdata))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
</UL>

<P><STRONG><a name="[361]"></a>debug_frmwrk_init_clk</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, debug_frmwrk.o(i.debug_frmwrk_init_clk))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[105]"></a>die</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nodereset.o(i.die))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievingFunc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetresp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAcquisition
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupChannel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackSensorData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsresp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packSensorData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgfunc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSTask
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_notice
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_ack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapMsgs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rctimer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_sendDone
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_received
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_sendDone
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_received
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingtimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compact
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest_SETUP
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWakeTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenfunc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockresp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeSync_Buffer
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_install_drv
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[2ad]"></a>disk_initialize</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, fs_sdio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_initialize &rArr; sdmmc_acquire &rArr; prv_process_csd &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_power_onoff
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[35c]"></a>disk_ioctl</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_sdio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2aa]"></a>disk_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fs_sdio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_read &rArr; sdmmc_read_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_read_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[2ac]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_sdio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[2c9]"></a>disk_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fs_sdio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_write_blocks
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1d9]"></a>doreadcfg</STRONG> (Thumb, 476 bytes, Stack size 592 bytes, remotesensing.o(i.doreadcfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = doreadcfg &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
</UL>

<P><STRONG><a name="[117]"></a>f_chdir</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, ff.o(i.f_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_chdir &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[11a]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[1df]"></a>f_gets</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[18b]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[118]"></a>f_open</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[2d6]"></a>f_putc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ff.o(i.f_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = f_putc &rArr;  f_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[119]"></a>f_puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.f_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_puts &rArr; f_putc &rArr;  f_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_writecfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[2d3]"></a>f_read</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[2d2]"></a>f_sync</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[26e]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[2b7]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2cf]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ff_memalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[2d1]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[2af]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[2d9]"></a>filtertest</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, filter.o(i.filtertest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = filtertest &rArr; arm_fir_decimate_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[2db]"></a>filtertest_SETUP</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, filter.o(i.filtertest_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = filtertest_SETUP &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_init_f32
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[481]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_install_drv
</UL>

<P><STRONG><a name="[2c3]"></a>gen_numname</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2b4]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2d4]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_sdio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1a8]"></a>gettime</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, rtc.o(i.gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2Dec
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAin1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[20d]"></a>init_NodeStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timesync.o(i.init_NodeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Register
</UL>

<P><STRONG><a name="[2e9]"></a>islongsleep</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, 4gftp.o(i.islongsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = islongsleep &rArr; readWakeTime &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWakeTime
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[2dc]"></a>lookup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, filter.o(i.lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lookup &rArr; lpc_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest_SETUP
</UL>

<P><STRONG><a name="[f5]"></a>lpc_printf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, debug_frmwrk.o(i.lpc_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lpc_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievingFunc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrievesent
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrievefunc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveexec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetsent
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetresp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetexec
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupChannel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Wakeup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamssent
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsresp
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsexec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdata
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_vcinfo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatasent
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatafunc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataexec
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_menu
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_menu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_menu
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_menu
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_settings
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgsent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgfunc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgexec
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcwritefunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xctimer
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rctimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingtimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compact
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWakeTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATNumGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltsent
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltexec
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utiltimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetsent
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;islongsleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer_tu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsensent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenfunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenexec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclocksent
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockresp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockexec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_synch
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xnode.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; c_entry &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[25e]"></a>mean_calculate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timesync.o(i.mean_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mean_calculate &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
</UL>

<P><STRONG><a name="[25d]"></a>medium_select</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timesync.o(i.medium_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = medium_select &rArr; qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
</UL>

<P><STRONG><a name="[2f0]"></a>nanddrv_erase</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nanddrv.o(i.nanddrv_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nanddrv_erase &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForBusy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_status_pass
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_cmd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_EraseBlock
</UL>

<P><STRONG><a name="[2f4]"></a>nanddrv_initialise</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, nanddrv.o(i.nanddrv_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nanddrv_initialise &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
</UL>

<P><STRONG><a name="[2f5]"></a>nanddrv_read_tr</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nanddrv.o(i.nanddrv_read_tr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nanddrv_read_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForBusy_READ
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_cmd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_CheckBad
</UL>

<P><STRONG><a name="[2f6]"></a>nanddrv_write_tr</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nanddrv.o(i.nanddrv_write_tr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nanddrv_write_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_WaitForReady
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_ReadStatus
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_status_pass
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_cmd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_send_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_MarkBad
</UL>

<P><STRONG><a name="[2f7]"></a>nval_del</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, yaffs_nameval.o(i.nval_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nval_del &rArr; nval_find &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_s32
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
</UL>

<P><STRONG><a name="[2fb]"></a>nval_hasvalues</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, yaffs_nameval.o(i.nval_hasvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nval_hasvalues &rArr; nval_used &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
</UL>

<P><STRONG><a name="[2fd]"></a>nval_set</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, yaffs_nameval.o(i.nval_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nval_set &rArr; nval_del &rArr; nval_find &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_s32
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
</UL>

<P><STRONG><a name="[30b]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2b5]"></a>put_fat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[304]"></a>pvPortMalloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, heap_3.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[372]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[375]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[153]"></a>radio_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, radio.o(i.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = radio_init &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievingFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
</UL>

<P><STRONG><a name="[32c]"></a>radio_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio.o(i.radio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = radio_on &rArr; rf233_on &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_on
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[2dd]"></a>radio_recv</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, radio.o(i.radio_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = radio_recv &rArr; rf233_read &rArr; trx_sram_read &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcRecvTask
</UL>

<P><STRONG><a name="[1f3]"></a>radio_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.radio_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_reset
</UL>

<P><STRONG><a name="[151]"></a>radio_send</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, radio.o(i.radio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_send
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_bcast
</UL>

<P><STRONG><a name="[156]"></a>radio_set_channel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.radio_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_set_channel &rArr; rf233_set_channel &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
</UL>

<P><STRONG><a name="[155]"></a>radio_set_short_addr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.radio_set_short_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_set_short_addr &rArr; rf233_set_short_addr &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_short_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievingFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensingFunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
</UL>

<P><STRONG><a name="[2cc]"></a>radio_sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio.o(i.radio_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_sleep &rArr; rf233_sleep &rArr; rf233_off &rArr; rf233_status &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetfunc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
</UL>

<P><STRONG><a name="[171]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>

<P><STRONG><a name="[175]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
</UL>

<P><STRONG><a name="[174]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[2ea]"></a>readWakeTime</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, 4gftp.o(i.readWakeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = readWakeTime &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;islongsleep
</UL>

<P><STRONG><a name="[144]"></a>read_isFTP</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, 4gftp.o(i.read_isFTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = read_isFTP &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
</UL>

<P><STRONG><a name="[147]"></a>read_nand2sdattemp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sdcard.o(i.read_nand2sdattemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = read_nand2sdattemp &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[31e]"></a>readadxl</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, triggersensing.o(i.readadxl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = readadxl &rArr; adxl362_FIFOread
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_FIFOread
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[26d]"></a>readidx</STRONG> (Thumb, 262 bytes, Stack size 568 bytes, remotesensing.o(i.readidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = readidx &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
</UL>

<P><STRONG><a name="[75]"></a>reportMQTT</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, 4gftp.o(i.reportMQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = reportMQTT &rArr; ATConnConfig &rArr; ATCommandCheck &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATNumGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_start)
</UL>
<P><STRONG><a name="[33b]"></a>rf233_arch_init</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, rf233-arch.o(i.rf233_arch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf233_arch_init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[33c]"></a>rf233_arch_reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rf233-arch.o(i.rf233_arch_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf233_arch_reset &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[33d]"></a>rf233_arch_sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf233-arch.o(i.rf233_arch_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf233_arch_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_sleep
</UL>

<P><STRONG><a name="[33e]"></a>rf233_arch_wake</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf233-arch.o(i.rf233_arch_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf233_arch_wake
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_on
</UL>

<P><STRONG><a name="[32f]"></a>rf233_channel_clear</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rf233.o(i.rf233_channel_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf233_channel_clear &rArr; rf233_status &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
</UL>

<P><STRONG><a name="[32b]"></a>rf233_init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, rf233.o(i.rf233_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_spi_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_irq_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_write
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_reset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_short_addr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_pan_id
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_ieee_addr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_filters
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_transmit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
</UL>

<P><STRONG><a name="[34c]"></a>rf233_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf233.o(i.rf233_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_off &rArr; rf233_status &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_sleep
</UL>

<P><STRONG><a name="[32d]"></a>rf233_on</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rf233.o(i.rf233_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rf233_on &rArr; TIM_Waitms &rArr; FreeRTOSWaitms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_wake
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_on
</UL>

<P><STRONG><a name="[32e]"></a>rf233_read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rf233.o(i.rf233_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rf233_read &rArr; trx_sram_read &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_read
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_flush_buffer
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_recv
</UL>

<P><STRONG><a name="[331]"></a>rf233_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rf233.o(i.rf233_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_transmit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_send
</UL>

<P><STRONG><a name="[332]"></a>rf233_set_channel</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rf233.o(i.rf233_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_set_channel &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_channel
</UL>

<P><STRONG><a name="[34b]"></a>rf233_set_ieee_addr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rf233.o(i.rf233_set_ieee_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_set_ieee_addr &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[34a]"></a>rf233_set_pan_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rf233.o(i.rf233_set_pan_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_set_pan_id &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[333]"></a>rf233_set_short_addr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rf233.o(i.rf233_set_short_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_set_short_addr &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_short_addr
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[334]"></a>rf233_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf233.o(i.rf233_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf233_sleep &rArr; rf233_off &rArr; rf233_status &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_sleep
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>

<P><STRONG><a name="[1ae]"></a>rtc_read</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, rtc.o(i.rtc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_clearflag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetContrl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Reconfigure
</UL>

<P><STRONG><a name="[1b4]"></a>rtc_write</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, rtc.o(i.rtc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_write &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_clearflag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetContrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAging
</UL>

<P><STRONG><a name="[f2]"></a>scu_pinmux</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, lpc43xx_scu.o(i.scu_pinmux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_pin_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_pin_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_arch_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_initialise
</UL>

<P><STRONG><a name="[10d]"></a>sdcalloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdmalloc.o(i.sdcalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nand2sdattemp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readidx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackSensorData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packSensorData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest_SETUP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWakeTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeSync_Buffer
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_install_drv
</UL>

<P><STRONG><a name="[194]"></a>sdfree</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sdmalloc.o(i.sdfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdunlock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatafunc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_notice
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_ack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRecvTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapMsgs
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRecvTask
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
</UL>

<P><STRONG><a name="[327]"></a>sdif_dma_setup</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc43xx_sdif.o(i.sdif_dma_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdif_dma_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_write_blocks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_read_blocks
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_process_csd
</UL>

<P><STRONG><a name="[357]"></a>sdif_get_response</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc43xx_sdif.o(i.sdif_get_response))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
</UL>

<P><STRONG><a name="[2c5]"></a>sdif_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc43xx_sdif.o(i.sdif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sdif_init &rArr; sdif_enable_clock &rArr; CGU_ConfigPWR &rArr;  CGU_ConfigPWR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_enable_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[2c6]"></a>sdif_power_onoff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_sdif.o(i.sdif_power_onoff))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[355]"></a>sdif_send_cmd</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, lpc43xx_sdif.o(i.sdif_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdif_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_set_clock
</UL>

<P><STRONG><a name="[354]"></a>sdif_set_clock</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lpc43xx_sdif.o(i.sdif_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
</UL>

<P><STRONG><a name="[351]"></a>sdlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdmalloc.o(i.sdlock))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
</UL>

<P><STRONG><a name="[18a]"></a>sdmalloc</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, sdmalloc.o(i.sdmalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdunlock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdlock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compact
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doreadcfg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_notice
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_ack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapMsgs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeSync_Buffer
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[2c7]"></a>sdmmc_acquire</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, lpc43xx_sdmmc.o(i.sdmmc_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sdmmc_acquire &rArr; prv_process_csd &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_trans_state
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_card_params
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_process_csd
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_card_acquired
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[2cb]"></a>sdmmc_get_state</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc43xx_sdmmc.o(i.sdmmc_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_write_blocks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_read_blocks
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2c8]"></a>sdmmc_read_blocks</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, lpc43xx_sdmmc.o(i.sdmmc_read_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdmmc_read_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_get_state
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_trans_state
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_dma_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2ca]"></a>sdmmc_write_blocks</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lpc43xx_sdmmc.o(i.sdmmc_write_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_get_state
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_trans_state
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_dma_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[352]"></a>sdunlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdmalloc.o(i.sdunlock))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
</UL>

<P><STRONG><a name="[7c]"></a>sensingFunc</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, remotesensing.o(i.sensingFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3056<LI>Call Chain = sensingFunc &rArr; PackAndSave &rArr; WriteToNAND &rArr; yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_short_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> remotesensing.o(i.setparamsfunc)
<LI> triggersensing.o(i.TriggerSensing)
</UL>
<P><STRONG><a name="[338]"></a>setTime</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, 4gftp.o(i.setTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = setTime &rArr; ATEchoCancel &rArr; checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
</UL>

<P><STRONG><a name="[229]"></a>setupAcquisition</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, sensing.o(i.setupAcquisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = setupAcquisition &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupDAQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[22a]"></a>setupChannel</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sensing.o(i.setupChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = setupChannel &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_setupCh
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[4e]"></a>smcallback</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, reliablecomm.o(i.smcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = smcallback &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[22d]"></a>startAcquisition</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sensing.o(i.startAcquisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = startAcquisition &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
</UL>

<P><STRONG><a name="[1e5]"></a>strnlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, yaffs_osglue.o(i.strnlen))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
</UL>

<P><STRONG><a name="[346]"></a>trx_bit_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, trx_access.o(i.trx_bit_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = trx_bit_read &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_transmit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[345]"></a>trx_bit_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, trx_access.o(i.trx_bit_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = trx_bit_write &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[34e]"></a>trx_frame_read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, trx_access.o(i.trx_frame_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trx_frame_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
</UL>

<P><STRONG><a name="[343]"></a>trx_frame_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, trx_access.o(i.trx_frame_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trx_frame_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_flush_buffer
</UL>

<P><STRONG><a name="[349]"></a>trx_irq_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, trx_access.o(i.trx_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trx_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[2a8]"></a>trx_reg_read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, trx_access.o(i.trx_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_write
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_read
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_channel
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_interrupt_poll
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_filters
</UL>

<P><STRONG><a name="[2a7]"></a>trx_reg_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, trx_access.o(i.trx_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_write
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_short_addr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_pan_id
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_ieee_addr
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_set_channel
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_on
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_off
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_transmit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_filters
</UL>

<P><STRONG><a name="[348]"></a>trx_spi_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, trx_access.o(i.trx_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[34f]"></a>trx_sram_read</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, trx_access.o(i.trx_sram_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = trx_sram_read &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_packet
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_packet
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_is_tx_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
</UL>

<P><STRONG><a name="[140]"></a>ulTaskNotifyTake</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ulTaskNotifyTake &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
</UL>

<P><STRONG><a name="[30e]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[32a]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xnode.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = vApplicationMallocFailedHook &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[362]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, xnode.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = vApplicationStackOverflowHook &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[308]"></a>vListInitialise</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[314]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[302]"></a>vListInsert</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[360]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>

<P><STRONG><a name="[307]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = vPortEnterCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[30a]"></a>vPortExitCritical</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[305]"></a>vPortFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, heap_3.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[36d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[363]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = vPortValidateInterruptPriority &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[309]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[31d]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[115]"></a>vTaskDelay</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataresp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMonitor_running
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfg_setparams
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_setparams
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataSubTask
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask2
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltresp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetresp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsensent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenexec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenesp
</UL>

<P><STRONG><a name="[1e0]"></a>vTaskDelete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vTaskDelete &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCWriteTask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldTTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldSTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportTimer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTask
</UL>

<P><STRONG><a name="[323]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[367]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vTaskPlaceOnEventList &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[365]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[368]"></a>vTaskPriorityInherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[35d]"></a>vTaskPrioritySet</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = vTaskPrioritySet &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockfunc
</UL>

<P><STRONG><a name="[369]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = vTaskSetTimeOutState &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2a5]"></a>vTaskStartScheduler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[30c]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[c6]"></a>vTaskSwitchContext</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[17d]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[17b]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[17e]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[17f]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[ac]"></a>writeTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, triggersensing.o(i.writeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = writeTask &rArr; writecfg_adxl &rArr; SDCard_ReWrite &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> triggersensing.o(i.trigsenfunc)
</UL>
<P><STRONG><a name="[2ce]"></a>write_isFTP</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, 4gftp.o(i.write_isFTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = write_isFTP &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_isFTP
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveexec
</UL>

<P><STRONG><a name="[143]"></a>write_istherefiletosend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 4gftp.o(i.write_istherefiletosend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_istherefiletosend &rArr; NandFlash_PageProgram &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffTimer
</UL>

<P><STRONG><a name="[2de]"></a>write_tosend</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdcard.o(i.write_tosend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = write_tosend &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
</UL>

<P><STRONG><a name="[36b]"></a>xPortStartScheduler</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xPortStartScheduler &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1f2]"></a>xQueueGenericCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
</UL>

<P><STRONG><a name="[2eb]"></a>xQueueGenericReceive</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRecvTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRecvTask
</UL>

<P><STRONG><a name="[370]"></a>xQueueGenericReset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2ee]"></a>xQueueGenericSend</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_notice
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldcallback_ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smcallback
</UL>

<P><STRONG><a name="[374]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[373]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[154]"></a>xTaskGenericCreate</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAcquisition
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdata
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgfunc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSTask
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRTask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenfunc
</UL>

<P><STRONG><a name="[1e1]"></a>xTaskGenericNotify</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrievesent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drretrieveexec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetsent
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetexec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamssent
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsexec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdatatask
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdata
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatasent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataexec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgsent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xnodecfgexec
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xctimer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportTimer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltsent
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltexec
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utiltimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetsent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetexec
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsensent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigsenexec
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclocksent
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockexec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_synch
</UL>

<P><STRONG><a name="[13e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
</UL>

<P><STRONG><a name="[371]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[106]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOSWaitms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[1fd]"></a>xTaskIncrementTick</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[312]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xTaskPriorityDisinherit &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[322]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xTaskRemoveFromEventList &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[30d]"></a>xTaskResumeAll</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[104]"></a>xTimerCreate</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
</UL>

<P><STRONG><a name="[36a]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[107]"></a>xTimerGenericCommand</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparamsfunc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatafunc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataexec
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ResetNodes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_ReadVoltage
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamMQTT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAUtil_ReadVoltage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeCfgSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncClock_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveData_start
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeRandTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_sendDone
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_sendDone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSensingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportMQTT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTimeGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPDataGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkATmessageReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_writedata_MQTT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMainTask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncclockexec
</UL>

<P><STRONG><a name="[376]"></a>yaffs1_scan</STRONG> (Thumb, 1310 bytes, Stack size 168 bytes, yaffs_yaffs1.o(i.yaffs1_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = yaffs1_scan &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_to_size
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[396]"></a>yaffs2_checkpt_invalidate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = yaffs2_checkpt_invalidate &rArr; yaffs2_checkpt_invalidate_stream &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[397]"></a>yaffs2_checkpt_invalidate_stream</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_invalidate_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffs2_checkpt_invalidate_stream &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
</UL>

<P><STRONG><a name="[39b]"></a>yaffs2_checkpt_open</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = yaffs2_checkpt_open &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_space_ok
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_init_chunk_hdr
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[39d]"></a>yaffs2_checkpt_rd</STRONG> (Thumb, 296 bytes, Stack size 104 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = yaffs2_checkpt_rd &rArr; yaffs2_checkpt_find_block
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_block
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_check_chunk_hdr
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_chunk_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_validity_marker
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
</UL>

<P><STRONG><a name="[3ca]"></a>yaffs2_checkpt_required</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_required))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
</UL>

<P><STRONG><a name="[39e]"></a>yaffs2_checkpt_restore</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = yaffs2_checkpt_restore &rArr; yaffs2_rd_checkpt_data &rArr; yaffs2_rd_checkpt_objs &rArr; yaffs2_checkpt_obj_to_obj &rArr; yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[3a5]"></a>yaffs2_checkpt_wr</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = yaffs2_checkpt_wr &rArr; yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_validity_marker
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>

<P><STRONG><a name="[3eb]"></a>yaffs2_clear_oldest_dirty_seq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.yaffs2_clear_oldest_dirty_seq))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[3a6]"></a>yaffs2_do_endian_tnode_copy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_do_endian_tnode_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs2_do_endian_tnode_copy &rArr; yaffs2_do_endian_tnode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>

<P><STRONG><a name="[3ad]"></a>yaffs2_find_oldest_dirty_seq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, yaffs_yaffs2.o(i.yaffs2_find_oldest_dirty_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs2_find_oldest_dirty_seq &rArr; yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_ok_for_gc
</UL>

<P><STRONG><a name="[3fd]"></a>yaffs2_find_refresh_block</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_find_refresh_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_find_refresh_block
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[3bd]"></a>yaffs2_get_checkpt_sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_checkptrw.o(i.yaffs2_get_checkpt_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs2_get_checkpt_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
</UL>

<P><STRONG><a name="[3af]"></a>yaffs2_handle_hole</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, yaffs_yaffs2.o(i.yaffs2_handle_hole))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[3c0]"></a>yaffs2_scan_backwards</STRONG> (Thumb, 716 bytes, Stack size 96 bytes, yaffs_yaffs2.o(i.yaffs2_scan_backwards))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = yaffs2_scan_backwards &rArr; yaffs2_scan_chunk &rArr; yaffs_retype_obj &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[404]"></a>yaffs2_update_oldest_dirty_seq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, yaffs_yaffs2.o(i.yaffs2_update_oldest_dirty_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs2_update_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[3d7]"></a>yaffs_add_device</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffs_add_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_add_device
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
</UL>

<P><STRONG><a name="[3bf]"></a>yaffs_add_find_tnode_0</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, yaffs_guts.o(i.yaffs_add_find_tnode_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = yaffs_add_find_tnode_0 &rArr; yaffs_get_tnode &rArr; yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[385]"></a>yaffs_add_obj_to_dir</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_add_obj_to_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_dir_to_dir
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
</UL>

<P><STRONG><a name="[3de]"></a>yaffs_addr_to_chunk</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_addr_to_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_addr_to_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[3e3]"></a>yaffs_alloc_raw_obj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, yaffs_allocator.o(i.yaffs_alloc_raw_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = yaffs_alloc_raw_obj &rArr; yaffs_create_free_objs &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
</UL>

<P><STRONG><a name="[3e6]"></a>yaffs_alloc_raw_tnode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_alloc_raw_tnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
</UL>

<P><STRONG><a name="[3e9]"></a>yaffs_attribs_init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, yaffs_attribs.o(i.yaffs_attribs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_attribs_init &rArr; yaffs_load_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>

<P><STRONG><a name="[388]"></a>yaffs_block_became_dirty</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_block_became_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_erase_block
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_clear_oldest_dirty_seq
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[3f1]"></a>yaffs_block_ok_for_gc</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, yaffs_yaffs2.o(i.yaffs_block_ok_for_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_block_ok_for_gc &rArr; yaffs2_find_oldest_dirty_seq &rArr; yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
</UL>

<P><STRONG><a name="[37a]"></a>yaffs_bug_fn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, yaffs_osglue.o(i.yaffs_bug_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_tnode
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_objs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_endian_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_rd_data_error
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[3f2]"></a>yaffs_calc_checkpt_blocks_required</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, yaffs_yaffs2.o(i.yaffs_calc_checkpt_blocks_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_calc_checkpt_blocks_required
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_required
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[3ae]"></a>yaffs_calc_oldest_dirty_seq</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs_calc_oldest_dirty_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
</UL>

<P><STRONG><a name="[402]"></a>yaffs_calc_tags_ecc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, yaffs_tagscompat.o(i.yaffs_calc_tags_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_ecc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tags_to_spare
</UL>

<P><STRONG><a name="[3b0]"></a>yaffs_check_alloc_available</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_check_alloc_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_check_alloc_available &rArr; yaffs_calc_checkpt_blocks_required
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[3f6]"></a>yaffs_check_chunk_bit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, yaffs_bitmap.o(i.yaffs_check_chunk_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_check_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[3f8]"></a>yaffs_check_ff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_check_ff))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
</UL>

<P><STRONG><a name="[401]"></a>yaffs_check_tags_ecc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, yaffs_tagscompat.o(i.yaffs_check_tags_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_check_tags_ecc &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tags_from_spare
</UL>

<P><STRONG><a name="[403]"></a>yaffs_checkpoint_save</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, yaffs_yaffs2.o(i.yaffs_checkpoint_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = yaffs_checkpoint_save &rArr; yaffs_verify_objects &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[3b9]"></a>yaffs_checkpt_close</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, yaffs_checkptrw.o(i.yaffs_checkpt_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = yaffs_checkpt_close &rArr; yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[382]"></a>yaffs_chunk_del</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, yaffs_guts.o(i.yaffs_chunk_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_update
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_update_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[149]"></a>yaffs_cleanOldFiles</STRONG> (Thumb, 268 bytes, Stack size 416 bytes, 4gftp.o(i.yaffs_cleanOldFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672<LI>Call Chain = yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[407]"></a>yaffs_clear_chunk_bit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, yaffs_bitmap.o(i.yaffs_clear_chunk_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_clear_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[378]"></a>yaffs_clear_chunk_bits</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, yaffs_bitmap.o(i.yaffs_clear_chunk_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_clear_chunk_bits &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[387]"></a>yaffs_clone_str</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_clone_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yaffs_clone_str &rArr; yaffsfs_malloc &rArr; sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[193]"></a>yaffs_close</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = yaffs_close &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[40c]"></a>yaffs_count_chunk_bits</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, yaffs_bitmap.o(i.yaffs_count_chunk_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
</UL>

<P><STRONG><a name="[4b6]"></a>yaffs_count_free_chunks</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, yaffs_guts.o(i.yaffs_count_free_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_count_free_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
</UL>

<P><STRONG><a name="[410]"></a>yaffs_create_file</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[41d]"></a>yaffs_deinit_nand</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_nand.o(i.yaffs_deinit_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_deinit_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[419]"></a>yaffs_deinit_raw_tnodes_and_objs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, yaffs_allocator.o(i.yaffs_deinit_raw_tnodes_and_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_deinit_raw_tnodes_and_objs &rArr; yaffs_deinit_raw_tnodes &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
</UL>

<P><STRONG><a name="[41b]"></a>yaffs_deinitialise</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_deinitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = yaffs_deinitialise &rArr; yaffs_deinit_tnodes_and_objs &rArr; yaffs_deinit_raw_tnodes_and_objs &rArr; yaffs_deinit_raw_tnodes &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[380]"></a>yaffs_del_obj</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_del_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_strip_deleted_objs
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_ReleaseInode
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[3c6]"></a>yaffs_do_endian_oh</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, yaffs_endian.o(i.yaffs_do_endian_oh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_do_endian_oh
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[42b]"></a>yaffs_do_endian_packed_tags2</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_endian.o(i.yaffs_do_endian_packed_tags2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_do_endian_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[2f9]"></a>yaffs_do_endian_s32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, yaffs_endian.o(i.yaffs_do_endian_s32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>

<P><STRONG><a name="[3a4]"></a>yaffs_do_endian_uc32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, yaffs_endian.o(i.yaffs_do_endian_uc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_do_endian_uc32
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tags_to_spare
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tags_from_spare
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_to_size
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_size_load
</UL>

<P><STRONG><a name="[3b1]"></a>yaffs_do_file_wr</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, yaffs_guts.o(i.yaffs_do_file_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = yaffs_do_file_wr &rArr; yaffs_grab_chunk_cache &rArr; yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_use_cache
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_chunk_cache
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
</UL>

<P><STRONG><a name="[47f]"></a>yaffs_ecc_calc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, yaffs_ecc.o(i.yaffs_ecc_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ecc_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
</UL>

<P><STRONG><a name="[491]"></a>yaffs_ecc_calc_other</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, yaffs_ecc.o(i.yaffs_ecc_calc_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ecc_calc_other
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
</UL>

<P><STRONG><a name="[434]"></a>yaffs_ecc_correct</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, yaffs_ecc.o(i.yaffs_ecc_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_ecc_correct
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
</UL>

<P><STRONG><a name="[435]"></a>yaffs_ecc_correct_other</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, yaffs_ecc.o(i.yaffs_ecc_correct_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = yaffs_ecc_correct_other &rArr; yaffs_hweight32
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight32
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[439]"></a>yaffs_endian_config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, yaffs_endian.o(i.yaffs_endian_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_endian_config &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[3ec]"></a>yaffs_erase_block</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, yaffs_nand.o(i.yaffs_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_format_dev
</UL>

<P><STRONG><a name="[43a]"></a>yaffs_file_rd</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, yaffs_guts.o(i.yaffs_file_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = yaffs_file_rd &rArr; yaffs_grab_chunk_cache &rArr; yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_use_cache
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[3f4]"></a>yaffs_find_by_name</STRONG> (Thumb, 196 bytes, Stack size 280 bytes, yaffs_guts.o(i.yaffs_find_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = yaffs_find_by_name &rArr; yaffs_get_obj_name &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_name_sum
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
</UL>

<P><STRONG><a name="[37f]"></a>yaffs_find_by_number</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_find_by_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_find_by_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
</UL>

<P><STRONG><a name="[43e]"></a>yaffs_find_chunk_in_file</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, yaffs_guts.o(i.yaffs_find_chunk_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = yaffs_find_chunk_in_file &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[37d]"></a>yaffs_find_or_create_by_number</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_find_or_create_by_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
</UL>

<P><STRONG><a name="[43f]"></a>yaffs_find_tnode_0</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, yaffs_guts.o(i.yaffs_find_tnode_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs_find_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[192]"></a>yaffs_flush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffs_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_flush &rArr; yaffs_fsync &rArr; yaffs_Dofsync &rArr; yaffs_flush_file &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsync
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[3d5]"></a>yaffs_flush_file</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_flush_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = yaffs_flush_file &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
</UL>

<P><STRONG><a name="[44c]"></a>yaffs_flush_whole_cache</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_flush_whole_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = yaffs_flush_whole_cache &rArr; yaffs_flush_file_cache &rArr; yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[14a]"></a>yaffs_format</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = yaffs_format &rArr; yaffs_format_common &rArr; yaffs_guts_initialise &rArr; yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[44d]"></a>yaffs_format_common</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, yaffsfs.o(i.yaffs_format_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = yaffs_format_common &rArr; yaffs_guts_initialise &rArr; yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsDevBusy
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_format_dev
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format
</UL>

<P><STRONG><a name="[456]"></a>yaffs_free_raw_obj</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_free_raw_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_free_raw_obj &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
</UL>

<P><STRONG><a name="[457]"></a>yaffs_free_raw_tnode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_free_raw_tnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_free_raw_tnode &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>

<P><STRONG><a name="[190]"></a>yaffs_fstat</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = yaffs_fstat &rArr; yaffsfs_DoStat &rArr; yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[449]"></a>yaffs_fsync</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffs_fsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = yaffs_fsync &rArr; yaffs_Dofsync &rArr; yaffs_flush_file &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush
</UL>

<P><STRONG><a name="[465]"></a>yaffs_get_equivalent_obj</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_get_equivalent_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindInodeIdForObject
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
</UL>

<P><STRONG><a name="[440]"></a>yaffs_get_group_base</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_get_group_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_get_group_base
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[466]"></a>yaffs_get_obj_length</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_get_obj_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[4c5]"></a>yaffs_get_obj_link_count</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_get_obj_link_count))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[18e]"></a>yaffs_get_obj_name</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_get_obj_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = yaffs_get_obj_name &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_name_from_oh
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>

<P><STRONG><a name="[377]"></a>yaffs_get_temp_buffer</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_get_temp_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yaffs_get_temp_buffer &rArr; yaffsfs_malloc &rArr; sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[3be]"></a>yaffs_get_tnode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_get_tnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = yaffs_get_tnode &rArr; yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
</UL>

<P><STRONG><a name="[452]"></a>yaffs_guts_format_dev</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_guts_format_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_guts_format_dev &rArr; yaffs_query_init_block_state
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_erase_block
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[453]"></a>yaffs_guts_initialise</STRONG> (Thumb, 942 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_guts_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = yaffs_guts_initialise &rArr; yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_strip_deleted_objs
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tnodes_and_objs
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_l_n_f
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_endian_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_ll_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[46a]"></a>yaffs_guts_ll_init</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_guts_ll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_guts_ll_init &rArr; yaffs_check_dev_fns
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_dev_fns
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_format_dev
</UL>

<P><STRONG><a name="[472]"></a>yaffs_handle_chunk_error</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_handle_chunk_error))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
</UL>

<P><STRONG><a name="[3c8]"></a>yaffs_handle_shadowed_obj</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_handle_shadowed_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = yaffs_handle_shadowed_obj &rArr; yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
</UL>

<P><STRONG><a name="[436]"></a>yaffs_hweight32</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, yaffs_hweight.o(i.yaffs_hweight32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_hweight32
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
</UL>

<P><STRONG><a name="[40d]"></a>yaffs_hweight8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, yaffs_hweight.o(i.yaffs_hweight8))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight32
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_chunk_bits
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_CheckBad
</UL>

<P><STRONG><a name="[470]"></a>yaffs_init_nand</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_nand.o(i.yaffs_init_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_init_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_ll_init
</UL>

<P><STRONG><a name="[477]"></a>yaffs_init_raw_tnodes_and_objs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_init_raw_tnodes_and_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_init_raw_tnodes_and_objs &rArr; yaffs_init_raw_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tnodes_and_objs
</UL>

<P><STRONG><a name="[41f]"></a>yaffs_is_non_empty_dir</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_is_non_empty_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_is_non_empty_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[389]"></a>yaffs_link_fixup</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_link_fixup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_link_fixup &rArr; yaffs_find_by_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[383]"></a>yaffs_load_attribs</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_attribs.o(i.yaffs_load_attribs))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[4b0]"></a>yaffs_load_attribs_oh</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_attribs.o(i.yaffs_load_attribs_oh))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[3ea]"></a>yaffs_load_current_time</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, yaffs_attribs.o(i.yaffs_load_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_load_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_attribs_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>

<P><STRONG><a name="[4a1]"></a>yaffs_mark_bad</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, yaffs_nand.o(i.yaffs_mark_bad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_mark_bad
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[483]"></a>yaffs_max_file_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_max_file_size))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[146]"></a>yaffs_mount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = yaffs_mount &rArr; yaffs_mount_common &rArr; yaffs_guts_initialise &rArr; yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[47b]"></a>yaffs_mount_common</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, yaffsfs.o(i.yaffs_mount_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = yaffs_mount_common &rArr; yaffs_guts_initialise &rArr; yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
</UL>

<P><STRONG><a name="[480]"></a>yaffs_nand_install_drv</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, yaffs_nand_drv.o(i.yaffs_nand_install_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = yaffs_nand_install_drv &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
</UL>

<P><STRONG><a name="[460]"></a>yaffs_oh_size_load</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_oh_size_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_oh_size_load &rArr; yaffs_do_endian_uc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[386]"></a>yaffs_oh_to_size</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_oh_to_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_oh_to_size &rArr; yaffs_do_endian_uc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[18f]"></a>yaffs_open</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = yaffs_open &rArr; yaffs_open_reldir &rArr; yaffs_open_sharing_reldir &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_reldir
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[485]"></a>yaffs_open_reldir</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_open_reldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = yaffs_open_reldir &rArr; yaffs_open_sharing_reldir &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
</UL>

<P><STRONG><a name="[486]"></a>yaffs_open_sharing_reldir</STRONG> (Thumb, 1082 bytes, Stack size 128 bytes, yaffsfs.o(i.yaffs_open_sharing_reldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = yaffs_open_sharing_reldir &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_closedir_no_lock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_TooManyObjects
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandleAndFileDes
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_file
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_reldir
</UL>

<P><STRONG><a name="[48f]"></a>yaffs_pack_tags2</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, yaffs_packedtags2.o(i.yaffs_pack_tags2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_pack_tags2 &rArr; yaffs_pack_tags2_tags_only &rArr; yaffs_do_endian_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc_other
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_write
</UL>

<P><STRONG><a name="[490]"></a>yaffs_pack_tags2_tags_only</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, yaffs_packedtags2.o(i.yaffs_pack_tags2_tags_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_pack_tags2_tags_only &rArr; yaffs_do_endian_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_packed_tags2
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_extra_packable
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_write
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
</UL>

<P><STRONG><a name="[37e]"></a>yaffs_put_chunk_in_file</STRONG> (Thumb, 242 bytes, Stack size 184 bytes, yaffs_guts.o(i.yaffs_put_chunk_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = yaffs_put_chunk_in_file &rArr; yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[3c1]"></a>yaffs_qsort</STRONG> (Thumb, 724 bytes, Stack size 80 bytes, yaffs_qsort.o(i.yaffs_qsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = yaffs_qsort &rArr;  yaffs_qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapfunc
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;med3
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[379]"></a>yaffs_query_init_block_state</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, yaffs_nand.o(i.yaffs_query_init_block_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_query_init_block_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_format_dev
</UL>

<P><STRONG><a name="[37b]"></a>yaffs_rd_chunk_tags_nand</STRONG> (Thumb, 136 bytes, Stack size 112 bytes, yaffs_nand.o(i.yaffs_rd_chunk_tags_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_chunk_offset
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_error
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[191]"></a>yaffs_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = yaffs_read &rArr; yaffsfs_do_read &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[38c]"></a>yaffs_release_temp_buffer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_release_temp_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_release_temp_buffer &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[195]"></a>yaffs_rename</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
</UL>

<P><STRONG><a name="[49d]"></a>yaffs_rename_obj</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_rename_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[49c]"></a>yaffs_rename_reldir</STRONG> (Thumb, 608 bytes, Stack size 96 bytes, yaffsfs.o(i.yaffs_rename_reldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_file_over_dir
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_dir_over_file
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
</UL>

<P><STRONG><a name="[424]"></a>yaffs_resize_file</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_resize_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_whole_cache
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[3b2]"></a>yaffs_resize_file_down</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_resize_file_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = yaffs_resize_file_down &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[3c7]"></a>yaffs_retype_obj</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_retype_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = yaffs_retype_obj &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_dir_to_dir
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
</UL>

<P><STRONG><a name="[37c]"></a>yaffs_set_chunk_bit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, yaffs_bitmap.o(i.yaffs_set_chunk_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_set_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[3f5]"></a>yaffs_set_obj_name</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_set_obj_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_set_obj_name &rArr; yaffs_fix_null_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_name_sum
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
</UL>

<P><STRONG><a name="[384]"></a>yaffs_set_obj_name_from_oh</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_set_obj_name_from_oh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = yaffs_set_obj_name_from_oh &rArr; yaffs_set_obj_name &rArr; yaffs_fix_null_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[3c4]"></a>yaffs_skip_rest_of_block</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_skip_rest_of_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_skip_rest_of_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[3ed]"></a>yaffs_skip_verification</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, yaffs_verify.o(i.yaffs_skip_verification))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_symlink
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_special
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_link
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
</UL>

<P><STRONG><a name="[145]"></a>yaffs_start_up</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, yaffscfg2k.o(i.yaffs_start_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_start_up &rArr; yaffs_nand_install_drv &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_initialise
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_device
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_install_drv
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_install
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_install
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRA_menu
</UL>

<P><STRONG><a name="[45c]"></a>yaffs_still_some_chunks</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, yaffs_bitmap.o(i.yaffs_still_some_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_still_some_chunks &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[4a5]"></a>yaffs_summary_add</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, yaffs_summary.o(i.yaffs_summary_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
</UL>

<P><STRONG><a name="[41c]"></a>yaffs_summary_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, yaffs_summary.o(i.yaffs_summary_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_summary_deinit &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[3c5]"></a>yaffs_summary_fetch</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, yaffs_summary.o(i.yaffs_summary_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_summary_fetch &rArr; yaffs_unpack_tags2_tags_only &rArr; yaffs_do_endian_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
</UL>

<P><STRONG><a name="[45b]"></a>yaffs_summary_gc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, yaffs_summary.o(i.yaffs_summary_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = yaffs_summary_gc &rArr; yaffs_clear_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[46e]"></a>yaffs_summary_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, yaffs_summary.o(i.yaffs_summary_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_summary_init &rArr; yaffs_summary_deinit &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[3c2]"></a>yaffs_summary_read</STRONG> (Thumb, 324 bytes, Stack size 152 bytes, yaffs_summary.o(i.yaffs_summary_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = yaffs_summary_read &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_sum
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[3fa]"></a>yaffs_tags_compat_install</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, yaffs_tagscompat.o(i.yaffs_tags_compat_install))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_dev_fns
</UL>

<P><STRONG><a name="[3fb]"></a>yaffs_tags_marshall_install</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_dev_fns
</UL>

<P><STRONG><a name="[408]"></a>yaffs_unlink</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffs_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_reldir
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
</UL>

<P><STRONG><a name="[422]"></a>yaffs_unlink_obj</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_unlink_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
</UL>

<P><STRONG><a name="[4ac]"></a>yaffs_unlink_reldir</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffs_unlink_reldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink
</UL>

<P><STRONG><a name="[4af]"></a>yaffs_unlinker</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_unlinker))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
</UL>

<P><STRONG><a name="[4ab]"></a>yaffs_unpack_tags2</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, yaffs_packedtags2.o(i.yaffs_unpack_tags2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = yaffs_unpack_tags2 &rArr; yaffs_ecc_correct_other &rArr; yaffs_hweight32
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc_other
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
</UL>

<P><STRONG><a name="[4a8]"></a>yaffs_unpack_tags2_tags_only</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, yaffs_packedtags2.o(i.yaffs_unpack_tags2_tags_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_unpack_tags2_tags_only &rArr; yaffs_do_endian_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_packed_tags2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_fetch
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[38a]"></a>yaffs_update_oh</STRONG> (Thumb, 644 bytes, Stack size 480 bytes, yaffs_guts.o(i.yaffs_update_oh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs_oh
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_obj_cache_dirty
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_oh_from_name
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_oh
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_size_load
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>

<P><STRONG><a name="[45d]"></a>yaffs_verify_blk</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, yaffs_verify.o(i.yaffs_verify_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = yaffs_verify_blk &rArr; yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_chunk_bits
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_collected_blk
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
</UL>

<P><STRONG><a name="[3a1]"></a>yaffs_verify_blocks</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, yaffs_verify.o(i.yaffs_verify_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = yaffs_verify_blocks &rArr; yaffs_verify_blk &rArr; yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[3f7]"></a>yaffs_verify_chunk_bit_id</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_bitmap.o(i.yaffs_verify_chunk_bit_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
</UL>

<P><STRONG><a name="[45f]"></a>yaffs_verify_collected_blk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, yaffs_verify.o(i.yaffs_verify_collected_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = yaffs_verify_collected_blk &rArr; yaffs_verify_blk &rArr; yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[3da]"></a>yaffs_verify_dir</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, yaffs_verify.o(i.yaffs_verify_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + In Cycle
<LI>Call Chain = yaffs_verify_dir &rArr;  yaffs_verify_obj_in_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_full_verification
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[4b4]"></a>yaffs_verify_file</STRONG> (Thumb, 180 bytes, Stack size 136 bytes, yaffs_verify.o(i.yaffs_verify_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_nand_verification
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[4bb]"></a>yaffs_verify_file_sane</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffs_verify.o(i.yaffs_verify_file_sane))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
</UL>

<P><STRONG><a name="[3a2]"></a>yaffs_verify_free_chunks</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_verify.o(i.yaffs_verify_free_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_verify_free_chunks &rArr; yaffs_count_free_chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_free_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[4b7]"></a>yaffs_verify_link</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, yaffs_verify.o(i.yaffs_verify_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_link
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[4b8]"></a>yaffs_verify_obj</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, yaffs_verify.o(i.yaffs_verify_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_symlink
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_special
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_link
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_nand_verification
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
</UL>

<P><STRONG><a name="[3dd]"></a>yaffs_verify_obj_in_dir</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, yaffs_verify.o(i.yaffs_verify_obj_in_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
</UL>

<P><STRONG><a name="[3a0]"></a>yaffs_verify_objects</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, yaffs_verify.o(i.yaffs_verify_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = yaffs_verify_objects &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
</UL>

<P><STRONG><a name="[461]"></a>yaffs_verify_oh</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, yaffs_verify.o(i.yaffs_verify_oh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_verify_oh
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[4ba]"></a>yaffs_verify_special</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, yaffs_verify.o(i.yaffs_verify_special))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_special
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[4b9]"></a>yaffs_verify_symlink</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, yaffs_verify.o(i.yaffs_verify_symlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_symlink
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[405]"></a>yaffs_wr_chunk_tags_nand</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, yaffs_nand.o(i.yaffs_wr_chunk_tags_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_chunk_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[4bc]"></a>yaffs_wr_file</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_wr_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = yaffs_wr_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
</UL>

<P><STRONG><a name="[26c]"></a>yaffs_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = yaffs_write &rArr; yaffsfs_do_write &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
</UL>

<P><STRONG><a name="[458]"></a>yaffsfs_CheckMemRegion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffs_osglue.o(i.yaffsfs_CheckMemRegion))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_closedir_no_lock
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[478]"></a>yaffsfs_CurrentTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, yaffs_osglue.o(i.yaffsfs_CurrentTime))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>

<P><STRONG><a name="[18d]"></a>yaffsfs_FindDevice</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, yaffsfs.o(i.yaffsfs_FindDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffsfs_FindDevice &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Match
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDatafromSD
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_cleanOldFiles
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualFTP
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
</UL>

<P><STRONG><a name="[3d2]"></a>yaffsfs_Lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_osglue.o(i.yaffsfs_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[3d4]"></a>yaffsfs_SetError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yaffs_osglue.o(i.yaffsfs_SetError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_SetError
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_closedir_no_lock
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[3d6]"></a>yaffsfs_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_osglue.o(i.yaffsfs_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[38b]"></a>yaffsfs_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yaffs_osglue.o(i.yaffsfs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[381]"></a>yaffsfs_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, yaffs_osglue.o(i.yaffsfs_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = yaffsfs_malloc &rArr; sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_endian_config
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>getdataexec</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, remotesensing.o(i.getdataexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = getdataexec &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdata
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[59]"></a>getdatafunc</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, remotesensing.o(i.getdatafunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = getdatafunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packSensorData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[57]"></a>getdataresp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, remotesensing.o(i.getdataresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getdataresp &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[58]"></a>getdatasent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, remotesensing.o(i.getdatasent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = getdatasent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[2e0]"></a>packSensorData</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, remotesensing.o(i.packSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = packSensorData &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdatafunc
</UL>

<P><STRONG><a name="[1dd]"></a>print_vcinfo</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, remotesensing.o(i.print_vcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_vcinfo &rArr; lpc_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_start
</UL>

<P><STRONG><a name="[2df]"></a>processdata</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, remotesensing.o(i.processdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = processdata &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackSensorData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdataexec
</UL>

<P><STRONG><a name="[a1]"></a>processdatatask</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, remotesensing.o(i.processdatatask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = processdatatask &rArr; RemoteSensing_writedata &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteSensing_writedata
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.processdata)
</UL>
<P><STRONG><a name="[5a]"></a>rstimer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, remotesensing.o(i.rstimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rstimer &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_start)
</UL>
<P><STRONG><a name="[52]"></a>setparamsexec</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, remotesensing.o(i.setparamsexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = setparamsexec &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[55]"></a>setparamsfunc</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, remotesensing.o(i.setparamsfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = setparamsfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAcquisition
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupChannel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAcquisition
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_on
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[53]"></a>setparamsresp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, remotesensing.o(i.setparamsresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = setparamsresp &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[54]"></a>setparamssent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, remotesensing.o(i.setparamssent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = setparamssent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remotesensing.o(i.RemoteSensing_init)
</UL>
<P><STRONG><a name="[300]"></a>unpackSensorData</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, remotesensing.o(i.unpackSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = unpackSensorData &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processdata
</UL>

<P><STRONG><a name="[5b]"></a>drpresetexec</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retrievedata.o(i.drpresetexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drpresetexec &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[5e]"></a>drpresetfunc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, retrievedata.o(i.drpresetfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = drpresetfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[5c]"></a>drpresetresp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retrievedata.o(i.drpresetresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = drpresetresp &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[5d]"></a>drpresetsent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, retrievedata.o(i.drpresetsent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drpresetsent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[5f]"></a>drretrieveexec</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, retrievedata.o(i.drretrieveexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 3016<LI>Call Chain = drretrieveexec &rArr; WriteToNAND &rArr; yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSD
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToNAND
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_isFTP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[62]"></a>drretrievefunc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retrievedata.o(i.drretrievefunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = drretrievefunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[60]"></a>drretrieveresp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retrievedata.o(i.drretrieveresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drretrieveresp &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[61]"></a>drretrievesent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retrievedata.o(i.drretrievesent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drretrievesent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_init)
</UL>
<P><STRONG><a name="[a8]"></a>getDatafromSD</STRONG> (Thumb, 918 bytes, Stack size 1168 bytes, retrievedata.o(i.getDatafromSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488<LI>Call Chain = getDatafromSD &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_start_up
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND2SD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.startDrPreset)
</UL>
<P><STRONG><a name="[33a]"></a>retrievingFunc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, retrievedata.o(i.retrievingFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = retrievingFunc &rArr; radio_init &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_set_short_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDrPreset
</UL>

<P><STRONG><a name="[63]"></a>rstimer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, retrievedata.o(i.rstimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rstimer &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retrievedata.o(i.RetrieveData_start)
</UL>
<P><STRONG><a name="[2cd]"></a>startDrPreset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, retrievedata.o(i.startDrPreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = startDrPreset &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievingFunc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drpresetfunc
</UL>

<P><STRONG><a name="[89]"></a>xctimer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, settings.o(i.xctimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = xctimer &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.XnodeCfgSend)
</UL>
<P><STRONG><a name="[26f]"></a>xcwritefunc</STRONG> (Thumb, 304 bytes, Stack size 560 bytes, settings.o(i.xcwritefunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = xcwritefunc &rArr; SDCard_ReWriteALL &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteALL
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCWriteTask
</UL>

<P><STRONG><a name="[8a]"></a>xnodecfgexec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i.xnodecfgexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = xnodecfgexec &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.XnodeConfig_Init)
</UL>
<P><STRONG><a name="[8d]"></a>xnodecfgfunc</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, settings.o(i.xnodecfgfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = xnodecfgfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.XnodeConfig_Init)
</UL>
<P><STRONG><a name="[8b]"></a>xnodecfgresp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, settings.o(i.xnodecfgresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = xnodecfgresp &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.XnodeConfig_Init)
</UL>
<P><STRONG><a name="[8c]"></a>xnodecfgsent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, settings.o(i.xnodecfgsent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = xnodecfgsent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.XnodeConfig_Init)
</UL>
<P><STRONG><a name="[9c]"></a>sdmmc_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_sdio.o(i.sdmmc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdmmc_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_sdio.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[9e]"></a>sdmmc_irq_driven_wait</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_sdio.o(i.sdmmc_irq_driven_wait))
<BR>[Address Reference Count : 1]<UL><LI> fs_sdio.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[9f]"></a>sdmmc_setup_wakeup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_sdio.o(i.sdmmc_setup_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdmmc_setup_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_sdio.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[9d]"></a>sdmmc_waitms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_sdio.o(i.sdmmc_waitms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdmmc_waitms &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_sdio.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[33f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf233.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_interrupt_poll
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[341]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf233.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_interrupt_poll
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[2a6]"></a>calibrate_filters</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rf233.o(i.calibrate_filters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calibrate_filters &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[342]"></a>rf233_flush_buffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf233.o(i.rf233_flush_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf233_flush_buffer &rArr; trx_frame_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_read
</UL>

<P><STRONG><a name="[344]"></a>rf233_generate_random_seed</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, rf233.o(i.rf233_generate_random_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf233_generate_random_seed &rArr; trx_bit_write &rArr; trx_reg_write &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_write
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_read
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
</UL>

<P><STRONG><a name="[a6]"></a>rf233_interrupt_poll</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rf233.o(i.rf233_interrupt_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf233_interrupt_poll &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime_get64
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf233.o(i.rf233_init)
</UL>
<P><STRONG><a name="[34d]"></a>rf233_prepare</STRONG> (Thumb, 102 bytes, Stack size 152 bytes, rf233.o(i.rf233_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_send
</UL>

<P><STRONG><a name="[340]"></a>rf233_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf233.o(i.rf233_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf233_status &rArr; trx_reg_read &rArr; spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_on
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_off
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_channel_clear
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_transmit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_prepare
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_generate_random_seed
</UL>

<P><STRONG><a name="[350]"></a>rf233_transmit</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, rf233.o(i.rf233_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rf233_transmit &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_bit_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_status
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf233_send
</UL>

<P><STRONG><a name="[35e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, trx_access.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_irq_init
</UL>

<P><STRONG><a name="[35f]"></a>spi_is_tx_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, trx_access.o(i.spi_is_tx_empty))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
</UL>

<P><STRONG><a name="[35a]"></a>spi_read_packet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, trx_access.o(i.spi_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_read_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_read
</UL>

<P><STRONG><a name="[35b]"></a>spi_write_packet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, trx_access.o(i.spi_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_sram_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_reg_read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_write
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx_frame_read
</UL>

<P><STRONG><a name="[2a9]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = check_fs &rArr; disk_read &rArr; sdmmc_read_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[2b8]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2ab]"></a>chk_mounted</STRONG> (Thumb, 868 bytes, Stack size 72 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = chk_mounted &rArr; disk_initialize &rArr; sdmmc_acquire &rArr; prv_process_csd &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[2ae]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2b3]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2b6]"></a>create_name</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2ba]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2bf]"></a>dir_next</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2c1]"></a>dir_register</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2bb]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2c4]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2d0]"></a>follow_path</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[2be]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2c2]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2b9]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2bc]"></a>move_window</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2d5]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2bd]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2d8]"></a>sync</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; sdmmc_write_blocks &rArr; sdmmc_get_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2d7]"></a>validate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[a3]"></a>prvTaskExitError</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvTaskExitError &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[310]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[311]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[317]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[318]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[321]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[301]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[303]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[30f]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[af]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[313]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[315]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[366]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[306]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[320]"></a>prvGetNextExpireTime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[316]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[319]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[31a]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[31c]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[31b]"></a>prvSampleTimeNow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[31f]"></a>prvSwitchTimerLists</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[b0]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[128]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
</UL>

<P><STRONG><a name="[166]"></a>I2C_GetByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[165]"></a>I2C_SendByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[164]"></a>I2C_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_Start))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[167]"></a>I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[168]"></a>I2C_getNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_getNum))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[162]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[161]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[353]"></a>sdif_enable_clock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc43xx_sdif.o(i.sdif_enable_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sdif_enable_clock &rArr; CGU_ConfigPWR &rArr;  CGU_ConfigPWR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_init
</UL>

<P><STRONG><a name="[356]"></a>prv_card_acquired</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_sdmmc.o(i.prv_card_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
</UL>

<P><STRONG><a name="[325]"></a>prv_get_bits</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, lpc43xx_sdmmc.o(i.prv_get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prv_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_process_csd
</UL>

<P><STRONG><a name="[324]"></a>prv_process_csd</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, lpc43xx_sdmmc.o(i.prv_process_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prv_process_csd &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_get_bits
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_dma_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
</UL>

<P><STRONG><a name="[328]"></a>prv_set_card_params</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpc43xx_sdmmc.o(i.prv_set_card_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prv_set_card_params &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
</UL>

<P><STRONG><a name="[329]"></a>prv_set_trans_state</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lpc43xx_sdmmc.o(i.prv_set_trans_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prv_set_trans_state &rArr; sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_execute_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_write_blocks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_read_blocks
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
</UL>

<P><STRONG><a name="[326]"></a>sdmmc_execute_command</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, lpc43xx_sdmmc.o(i.sdmmc_execute_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sdmmc_execute_command &rArr; sdif_set_clock &rArr; sdif_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_set_clock
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_send_cmd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdif_get_response
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_write_blocks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_read_blocks
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_get_state
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_acquire
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_trans_state
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_set_card_params
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_process_csd
</UL>

<P><STRONG><a name="[204]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.converPtrToTimeNum))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[205]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc43xx_timer.o(i.converUSecToVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = converUSecToVal &rArr; getPClock &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[2b2]"></a>getPClock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc43xx_timer.o(i.getPClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getPClock &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[15c]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_lpc43xx.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[202]"></a>WaitUs</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, system_lpc43xx.o(i.WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>

<P><STRONG><a name="[233]"></a>uart_set_divisors</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, lpc43xx_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a4]"></a>radio_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.radio_callback))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.radio_init)
</UL>
<P><STRONG><a name="[46]"></a>gcRecvTask</STRONG> (Thumb, 160 bytes, Stack size 128 bytes, genericcomm.o(i.gcRecvTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = gcRecvTask &rArr; radio_recv &rArr; rf233_read &rArr; trx_sram_read &rArr; TIM_Waitus &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genericcomm.o(i.GenericComm_init)
</UL>
<P><STRONG><a name="[4b]"></a>SendLData_SLDIReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, reliablecomm.o(i.SendLData_SLDIReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendLData_SLDIReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_SLDIAlloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[4c]"></a>SendLData_received</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, reliablecomm.o(i.SendLData_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SendLData_received &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[4d]"></a>SendLData_sendDone</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, reliablecomm.o(i.SendLData_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SendLData_sendDone &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[49]"></a>SendSMsg_received</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, reliablecomm.o(i.SendSMsg_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SendSMsg_received &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[4a]"></a>SendSMsg_sendDone</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, reliablecomm.o(i.SendSMsg_sendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SendSMsg_sendDone &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_init)
</UL>
<P><STRONG><a name="[4f]"></a>rctimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, reliablecomm.o(i.rctimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rctimer &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reliablecomm.o(i.ReliableComm_send)
</UL>
<P><STRONG><a name="[1cc]"></a>clearState</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, remotecommand.o(i.clearState))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = clearState &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_sendDone
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executionDone
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCmd
</UL>

<P><STRONG><a name="[1c1]"></a>executeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, remotecommand.o(i.executeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = executeCmd &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
</UL>

<P><STRONG><a name="[1c2]"></a>executionDone</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, remotecommand.o(i.executionDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = executionDone &rArr; clearState &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearState
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_receive
</UL>

<P><STRONG><a name="[1cf]"></a>rcSend</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, remotecommand.o(i.rcSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReliableComm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_execute
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
</UL>

<P><STRONG><a name="[1ce]"></a>swapMsgs</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, remotecommand.o(i.swapMsgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = swapMsgs &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
</UL>

<P><STRONG><a name="[67]"></a>TimerNotice_fired</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, sendldata.o(i.TimerNotice_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = TimerNotice_fired &rArr; reqMissingDataTask &rArr; sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sldiReorder
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqMissingDataTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[68]"></a>TimerTimeout_fired</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, sendldata.o(i.TimerTimeout_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = TimerTimeout_fired &rArr; timeoutResetTask &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[69]"></a>TimerWait1_fired</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sendldata.o(i.TimerWait1_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = TimerWait1_fired &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[6a]"></a>TimerWait2_fired</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sendldata.o(i.TimerWait2_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = TimerWait2_fired &rArr; sendNoticeSubTask2 &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[2a0]"></a>beginTask</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sendldata.o(i.beginTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = beginTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
</UL>

<P><STRONG><a name="[212]"></a>comment3CheckTask</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, sendldata.o(i.comment3CheckTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = comment3CheckTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[2b0]"></a>comment3CheckUnicastTask</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, sendldata.o(i.comment3CheckUnicastTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = comment3CheckUnicastTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
</UL>

<P><STRONG><a name="[2e1]"></a>handleAck</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, sendldata.o(i.handleAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = handleAck &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRecvTask
</UL>

<P><STRONG><a name="[2ec]"></a>handleData</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sendldata.o(i.handleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handleData
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRecvTask
</UL>

<P><STRONG><a name="[2e2]"></a>handleNotice</STRONG> (Thumb, 2982 bytes, Stack size 64 bytes, sendldata.o(i.handleNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = handleNotice &rArr; reqMissingDataTask &rArr; sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckMsgTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqMissingDataTask
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckUnicastTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldRecvTask
</UL>

<P><STRONG><a name="[211]"></a>informAckNodeTask</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sendldata.o(i.informAckNodeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = informAckNodeTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[a9]"></a>ldRTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sendldata.o(i.ldRTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ldRTask &rArr; vTaskDelete &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.startRTask)
</UL>
<P><STRONG><a name="[6b]"></a>ldRecvTask</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sendldata.o(i.ldRecvTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ldRecvTask &rArr; handleNotice &rArr; reqMissingDataTask &rArr; sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleData
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[aa]"></a>ldSTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sendldata.o(i.ldSTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ldSTask &rArr; vTaskDelete &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.startSTask)
</UL>
<P><STRONG><a name="[ab]"></a>ldTTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sendldata.o(i.ldTTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ldTTask &rArr; sendDataTask &rArr; sendDataSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.startTTask)
</UL>
<P><STRONG><a name="[64]"></a>ldcallback_ack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sendldata.o(i.ldcallback_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ldcallback_ack &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[66]"></a>ldcallback_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sendldata.o(i.ldcallback_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ldcallback_data &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[65]"></a>ldcallback_notice</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sendldata.o(i.ldcallback_notice))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ldcallback_notice &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendldata.o(i.SendLData_init)
</UL>
<P><STRONG><a name="[1f1]"></a>nodeInqTask</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, sendldata.o(i.nodeInqTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = nodeInqTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_bcast
</UL>

<P><STRONG><a name="[335]"></a>receivedTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sendldata.o(i.receivedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = receivedTask &rArr; startRTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRTask
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
</UL>

<P><STRONG><a name="[215]"></a>reqMissingDataTask</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sendldata.o(i.reqMissingDataTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = reqMissingDataTask &rArr; sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeRandTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[2e3]"></a>sendAckMsgTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sendldata.o(i.sendAckMsgTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = sendAckMsgTask &rArr; sendNoticeSubTask2 &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask2
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
</UL>

<P><STRONG><a name="[2e4]"></a>sendAckRandTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sendldata.o(i.sendAckRandTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sendAckRandTask &rArr; sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeRandTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
</UL>

<P><STRONG><a name="[358]"></a>sendDataSubTask</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, sendldata.o(i.sendDataSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = sendDataSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTTask
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeEndTask
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataTask
</UL>

<P><STRONG><a name="[2ed]"></a>sendDataTask</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, sendldata.o(i.sendDataTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = sendDataTask &rArr; sendDataSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataSubTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldTTask
</UL>

<P><STRONG><a name="[214]"></a>sendDoneTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sendldata.o(i.sendDoneTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sendDoneTask &rArr; startSTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSTask
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[359]"></a>sendNoticeEndTask</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sendldata.o(i.sendNoticeEndTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = sendNoticeEndTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataSubTask
</UL>

<P><STRONG><a name="[339]"></a>sendNoticeRandTask</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sendldata.o(i.sendNoticeRandTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = sendNoticeRandTask &rArr; sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqMissingDataTask
</UL>

<P><STRONG><a name="[1f5]"></a>sendNoticeSubTask</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, sendldata.o(i.sendNoticeSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = sendNoticeSubTask &rArr;  sendNoticeSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeEndTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeSubTask
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeRandTask
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNoticeEndTask
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckMsgTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqMissingDataTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckUnicastTask
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckTask
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerWait1_fired
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_send
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLData_reset
</UL>

<P><STRONG><a name="[21d]"></a>sendNoticeSubTask2</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sendldata.o(i.sendNoticeSubTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = sendNoticeSubTask2 &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckMsgTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerWait2_fired
</UL>

<P><STRONG><a name="[213]"></a>sldiReorder</STRONG> (Thumb, 96 bytes, Stack size 248 bytes, sendldata.o(i.sldiReorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sldiReorder
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[336]"></a>startRTask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sendldata.o(i.startRTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = startRTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
</UL>

<P><STRONG><a name="[21c]"></a>startSTask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sendldata.o(i.startSTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = startSTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeout_fired
</UL>

<P><STRONG><a name="[20f]"></a>startTTask</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sendldata.o(i.startTTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = startTTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataSubTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotice
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckUnicastTask
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comment3CheckTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[210]"></a>timeoutResetTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sendldata.o(i.timeoutResetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = timeoutResetTask &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeout_fired
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNotice_fired
</UL>

<P><STRONG><a name="[6d]"></a>TimerShort_fired</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, sendsmsg.o(i.TimerShort_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = TimerShort_fired &rArr; sendDoneTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssmiReorder
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendsmsg.o(i.SendSMsg_init)
</UL>
<P><STRONG><a name="[6e]"></a>TimerTimeout_fired</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sendsmsg.o(i.TimerTimeout_fired))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = TimerTimeout_fired &rArr; timeoutResetTask &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendsmsg.o(i.SendSMsg_init)
</UL>
<P><STRONG><a name="[2a1]"></a>beginTask</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, sendsmsg.o(i.beginTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = beginTask &rArr;  sendShortSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
</UL>

<P><STRONG><a name="[2e5]"></a>handleReceiveCommon</STRONG> (Thumb, 1652 bytes, Stack size 24 bytes, sendsmsg.o(i.handleReceiveCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = handleReceiveCommon &rArr; sendAckRandTask2 &rArr; sendShortSubTask2 &rArr; receivedTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_isBusy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDoneTask
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask2
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRecvTask
</UL>

<P><STRONG><a name="[21a]"></a>informAckNodeTask</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sendsmsg.o(i.informAckNodeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = informAckNodeTask &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[216]"></a>nodeInqTask</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, sendsmsg.o(i.nodeInqTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = nodeInqTask &rArr;  sendShortSubTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[337]"></a>receivedTask</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sendsmsg.o(i.receivedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = receivedTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask2
</UL>

<P><STRONG><a name="[2e7]"></a>sendAckRandTask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sendsmsg.o(i.sendAckRandTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = sendAckRandTask &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>

<P><STRONG><a name="[2e8]"></a>sendAckRandTask2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sendsmsg.o(i.sendAckRandTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = sendAckRandTask2 &rArr; sendShortSubTask2 &rArr; receivedTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>

<P><STRONG><a name="[218]"></a>sendDoneTask</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sendsmsg.o(i.sendDoneTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sendDoneTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[1f6]"></a>sendShortSubTask</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, sendsmsg.o(i.sendShortSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeoutResetTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMsg_reset
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;informAckNodeTask
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[2e6]"></a>sendShortSubTask2</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sendsmsg.o(i.sendShortSubTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sendShortSubTask2 &rArr; receivedTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericComm_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckRandTask2
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>

<P><STRONG><a name="[6f]"></a>smRecvTask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sendsmsg.o(i.smRecvTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = smRecvTask &rArr; handleReceiveCommon &rArr; sendAckRandTask2 &rArr; sendShortSubTask2 &rArr; receivedTask &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleReceiveCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendsmsg.o(i.SendSMsg_init)
</UL>
<P><STRONG><a name="[6c]"></a>smcallback</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sendsmsg.o(i.smcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = smcallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sendsmsg.o(i.SendSMsg_init)
</UL>
<P><STRONG><a name="[217]"></a>ssmiReorder</STRONG> (Thumb, 96 bytes, Stack size 248 bytes, sendsmsg.o(i.ssmiReorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ssmiReorder
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[219]"></a>timeoutResetTask</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sendsmsg.o(i.timeoutResetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = timeoutResetTask &rArr; Timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShortSubTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeInqTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeout_fired
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerShort_fired
</UL>

<P><STRONG><a name="[1e6]"></a>print_error</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sdcard.o(i.print_error))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[2b1]"></a>compact</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sdmalloc.o(i.compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = compact &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
</UL>

<P><STRONG><a name="[a7]"></a>prvQueueSensingTask</STRONG> (Thumb, 3658 bytes, Stack size 208 bytes, sensing.o(i.prvQueueSensingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = prvQueueSensingTask &rArr; PackAndSave &rArr; WriteToNAND &rArr; yaffs_cleanOldFiles &rArr; yaffs_unlink &rArr; yaffs_unlink_reldir &rArr; yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdfree
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_setup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalTime_get64
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackAndSave
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_startSensing
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_readDataPt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads131_off
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tosend
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime_get64
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnoozeAlarm_Sleep
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest_SETUP
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtertest
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readadxl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensing.o(i.startAcquisition)
</UL>
<P><STRONG><a name="[a2]"></a>sensingtimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensing.o(i.sensingtimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sensingtimer &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sensing.o(i.prvQueueSensingTask)
<LI> sensing.o(i.setupAcquisition)
</UL>
<P><STRONG><a name="[223]"></a>readcfg_adxl</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, triggersensing.o(i.readcfg_adxl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readcfg_adxl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenCfgSend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenSetup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecfg_adxl
</UL>

<P><STRONG><a name="[79]"></a>trigsenesp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, triggersensing.o(i.trigsenesp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = trigsenesp &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> triggersensing.o(i.Trig_Init)
</UL>
<P><STRONG><a name="[78]"></a>trigsenexec</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, triggersensing.o(i.trigsenexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = trigsenexec &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> triggersensing.o(i.Trig_Init)
</UL>
<P><STRONG><a name="[7b]"></a>trigsenfunc</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, triggersensing.o(i.trigsenfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = trigsenfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> triggersensing.o(i.Trig_Init)
</UL>
<P><STRONG><a name="[7a]"></a>trigsensent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, triggersensing.o(i.trigsensent))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = trigsensent &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> triggersensing.o(i.Trig_Init)
</UL>
<P><STRONG><a name="[224]"></a>writecfg_adxl</STRONG> (Thumb, 1542 bytes, Stack size 608 bytes, triggersensing.o(i.writecfg_adxl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = writecfg_adxl &rArr; SDCard_ReWrite &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_PageProgram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandFlash_BlockErase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWrite
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readcfg_adxl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrigSenSetup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTask
</UL>

<P><STRONG><a name="[21e]"></a>Timer_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xnode.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Timer_Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; getPClock &rArr; CGU_GetPCLKFrequency &rArr; CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[ae]"></a>feedwdt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xnode.o(i.feedwdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feedwdt
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xnode.o(i.vAppMainTask)
</UL>
<P><STRONG><a name="[ad]"></a>rstimer_tu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xnode.o(i.rstimer_tu))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rstimer_tu &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xnode.o(i.vAppMainTask)
</UL>
<P><STRONG><a name="[90]"></a>vAppMainTask</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, xnode.o(i.vAppMainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = vAppMainTask &rArr; app_main &rArr; app_gateway &rArr; FRA_menu &rArr; ManualFTP &rArr; yaffs_rename &rArr; yaffs_rename_reldir &rArr; yaffs_rename_obj &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RGB
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_motiondetection
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XnodeConfig_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Connect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_clearflag
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;islongsleep
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl_inact_setup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSensing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Reconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xnode.o(i.c_entry)
</UL>
<P><STRONG><a name="[2a4]"></a>wdtInit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, xnode.o(i.wdtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wdtInit &rArr; WWDT_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Start
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDT_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_entry
</UL>

<P><STRONG><a name="[81]"></a>resetexec</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(i.resetexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = resetexec &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[84]"></a>resetfunc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utils.o(i.resetfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = resetfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[82]"></a>resetresp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.resetresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = resetresp &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[83]"></a>resetsent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utils.o(i.resetsent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = resetsent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[45]"></a>utiltimer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utils.o(i.utiltimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = utiltimer &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> utils.o(i.Util_ReadVoltage)
<LI> utils.o(i.Util_ResetNodes)
<LI> utils.o(i.FRAUtil_ReadVoltage)
</UL>
<P><STRONG><a name="[7d]"></a>voltexec</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, utils.o(i.voltexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = voltexec &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[80]"></a>voltfunc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, utils.o(i.voltfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = voltfunc &rArr; RemoteCommand_done &rArr; rcSend &rArr; ReliableComm_send &rArr; SendSMsg_send &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[7e]"></a>voltresp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.voltresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = voltresp &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[7f]"></a>voltsent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utils.o(i.voltsent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = voltsent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(i.Util_Init)
</UL>
<P><STRONG><a name="[43]"></a>ATTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 4gftp.o(i.ATTimer))
<BR>[Address Reference Count : 3]<UL><LI> 4gftp.o(i.ATTimeGet)
<LI> 4gftp.o(i.ATTCPDataGet)
<LI> 4gftp.o(i.checkATmessageReply)
</UL>
<P><STRONG><a name="[48]"></a>OffTimer</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, 4gftp.o(i.OffTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = OffTimer &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_istherefiletosend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> 4gftp.o(i.ManualFTP)
<LI> 4gftp.o(i.UpdateParamMQTT)
<LI> 4gftp.o(i.Voltage_writedata_MQTT)
</UL>
<P><STRONG><a name="[a5]"></a>ReportTimer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, 4gftp.o(i.ReportTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ReportTimer &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4gftp.o(i.reportMQTT)
</UL>
<P><STRONG><a name="[44]"></a>TCP_Rev_Timer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 4gftp.o(i.TCP_Rev_Timer))
<BR>[Address Reference Count : 1]<UL><LI> 4gftp.o(i.ATTCPReceive)
</UL>
<P><STRONG><a name="[f7]"></a>checkATmessageReply</STRONG> (Thumb, 350 bytes, Stack size 320 bytes, 4gftp.o(i.checkATmessageReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = checkATmessageReply &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPPacketSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPConnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATTCPClose
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATSwitchOff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATHarwareFlowControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEchoCancel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATEOFCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATConnConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandCheck
</UL>

<P><STRONG><a name="[77]"></a>callback_tsc_cmd</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, timesync.o(i.callback_tsc_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = callback_tsc_cmd &rArr; Update_LocalParameter &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LocalParameter
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_dat2msg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compute_parameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.TimeSync_Register)
</UL>
<P><STRONG><a name="[20b]"></a>init_TimeSync_Buffer</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, timesync.o(i.init_TimeSync_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = init_TimeSync_Buffer &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSync_Register
</UL>

<P><STRONG><a name="[74]"></a>sctimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timesync.o(i.sctimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sctimer &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_init)
</UL>
<P><STRONG><a name="[76]"></a>sctimer_synch</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timesync.o(i.sctimer_synch))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sctimer_synch &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_start)
</UL>
<P><STRONG><a name="[70]"></a>syncclockexec</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, timesync.o(i.syncclockexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = syncclockexec &rArr; RemoteCommand_stop &rArr; ReliableComm_reset &rArr; SendSMsg_reset &rArr; sendShortSubTask &rArr; GenericComm_send &rArr; GenericComm_bcast &rArr; radio_send &rArr; rf233_send &rArr; rf233_prepare &rArr; rf233_init &rArr; trx_spi_init &rArr; SPI_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_init)
</UL>
<P><STRONG><a name="[73]"></a>syncclockfunc</STRONG> (Thumb, 232 bytes, Stack size 512 bytes, timesync.o(i.syncclockfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = syncclockfunc &rArr; SDCard_ReWriteCN &rArr; f_open &rArr; ff_memfree &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommand_done
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBatteryVoltage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetClock
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_ReWriteCN
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_init)
</UL>
<P><STRONG><a name="[71]"></a>syncclockresp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timesync.o(i.syncclockresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = syncclockresp &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_init)
</UL>
<P><STRONG><a name="[72]"></a>syncclocksent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timesync.o(i.syncclocksent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = syncclocksent &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesync.o(i.SyncClock_init)
</UL>
<P><STRONG><a name="[2f2]"></a>nanddrv_send_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nanddrv.o(i.nanddrv_send_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nanddrv_send_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
</UL>

<P><STRONG><a name="[2f1]"></a>nanddrv_send_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nanddrv.o(i.nanddrv_send_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
</UL>

<P><STRONG><a name="[2f3]"></a>nanddrv_status_pass</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanddrv.o(i.nanddrv_status_pass))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
</UL>

<P><STRONG><a name="[412]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffs_allocator.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
</UL>

<P><STRONG><a name="[3e4]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffs_allocator.o(i.list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
</UL>

<P><STRONG><a name="[3e5]"></a>yaffs_create_free_objs</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, yaffs_allocator.o(i.yaffs_create_free_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_create_free_objs &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
</UL>

<P><STRONG><a name="[3e7]"></a>yaffs_create_tnodes</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, yaffs_allocator.o(i.yaffs_create_tnodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_create_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
</UL>

<P><STRONG><a name="[417]"></a>yaffs_deinit_raw_objs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_deinit_raw_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_deinit_raw_objs &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[418]"></a>yaffs_deinit_raw_tnodes</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_deinit_raw_tnodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_deinit_raw_tnodes &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[475]"></a>yaffs_init_raw_objs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_init_raw_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_init_raw_objs &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[476]"></a>yaffs_init_raw_tnodes</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, yaffs_allocator.o(i.yaffs_init_raw_tnodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_init_raw_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[3f0]"></a>yaffs_block_bits</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, yaffs_bitmap.o(i.yaffs_block_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_block_bits &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_still_some_chunks
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_chunk_bits
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
</UL>

<P><STRONG><a name="[391]"></a>apply_block_offset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_checkptrw.o(i.apply_block_offset))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_block
</UL>

<P><STRONG><a name="[390]"></a>apply_chunk_offset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_checkptrw.o(i.apply_chunk_offset))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_block
</UL>

<P><STRONG><a name="[3aa]"></a>swap_uc32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_checkptrw.o(i.swap_uc32))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_hdr
</UL>

<P><STRONG><a name="[38d]"></a>yaffs2_checkpt_check_chunk_hdr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_check_chunk_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs2_checkpt_check_chunk_hdr &rArr; yaffs2_do_endian_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_hdr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>

<P><STRONG><a name="[38f]"></a>yaffs2_checkpt_find_block</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_find_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = yaffs2_checkpt_find_block
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_chunk_offset
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_block_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>

<P><STRONG><a name="[392]"></a>yaffs2_checkpt_find_erased_block</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_find_erased_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>

<P><STRONG><a name="[394]"></a>yaffs2_checkpt_flush_buffer</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_flush_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_init_chunk_hdr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_erased_block
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_chunk_offset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>

<P><STRONG><a name="[395]"></a>yaffs2_checkpt_init_chunk_hdr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_init_chunk_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs2_checkpt_init_chunk_hdr &rArr; yaffs2_do_endian_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_hdr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>

<P><STRONG><a name="[39c]"></a>yaffs2_checkpt_space_ok</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffs_checkptrw.o(i.yaffs2_checkpt_space_ok))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
</UL>

<P><STRONG><a name="[38e]"></a>yaffs2_do_endian_hdr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_checkptrw.o(i.yaffs2_do_endian_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_do_endian_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_init_chunk_hdr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_check_chunk_hdr
</UL>

<P><STRONG><a name="[398]"></a>yaffs_checkpt_erase</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, yaffs_checkptrw.o(i.yaffs_checkpt_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_block_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate_stream
</UL>

<P><STRONG><a name="[393]"></a>yaffs_get_block_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yaffs_checkptrw.o(i.yaffs_get_block_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_erased_block
</UL>

<P><STRONG><a name="[42a]"></a>swap_uc32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_endian.o(i.swap_uc32))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_s32
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_packed_tags2
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_oh
</UL>

<P><STRONG><a name="[3dc]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffs_guts.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
</UL>

<P><STRONG><a name="[414]"></a>list_del_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, yaffs_guts.o(i.list_del_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[428]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffs_guts.o(i.list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[3df]"></a>yaffs_alloc_chunk</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_alloc_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = yaffs_alloc_chunk &rArr; yaffs_set_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_alloc_block
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[3e2]"></a>yaffs_alloc_empty_obj</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_alloc_empty_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[3e8]"></a>yaffs_apply_xattrib_mod</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_apply_xattrib_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = yaffs_apply_xattrib_mod &rArr; nval_set &rArr; nval_del &rArr; nval_find &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_hasvalues
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[43b]"></a>yaffs_calc_name_sum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_calc_name_sum))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>

<P><STRONG><a name="[3f3]"></a>yaffs_change_obj_name</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_change_obj_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
</UL>

<P><STRONG><a name="[3ee]"></a>yaffs_check_chunk_erased</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, yaffs_guts.o(i.yaffs_check_chunk_erased))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[3f9]"></a>yaffs_check_dev_fns</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_check_dev_fns))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_check_dev_fns
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_install
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_install
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_ll_init
</UL>

<P><STRONG><a name="[3fc]"></a>yaffs_check_gc</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_check_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_refresh_block
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[400]"></a>yaffs_check_obj_details_loaded</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, yaffs_guts.o(i.yaffs_check_obj_details_loaded))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_oh
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>

<P><STRONG><a name="[40e]"></a>yaffs_create_fake_dir</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_create_fake_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = yaffs_create_fake_dir &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
</UL>

<P><STRONG><a name="[413]"></a>yaffs_create_initial_dir</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_create_initial_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = yaffs_create_initial_dir &rArr; yaffs_create_fake_dir &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_fake_dir
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[411]"></a>yaffs_create_obj</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, yaffs_guts.o(i.yaffs_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_attribs_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_file
</UL>

<P><STRONG><a name="[416]"></a>yaffs_deinit_blocks</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_deinit_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_deinit_blocks &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[41a]"></a>yaffs_deinit_tnodes_and_objs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_deinit_tnodes_and_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_deinit_tnodes_and_objs &rArr; yaffs_deinit_raw_tnodes_and_objs &rArr; yaffs_deinit_raw_tnodes &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[41e]"></a>yaffs_del_dir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_del_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_del_dir &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[421]"></a>yaffs_del_dir_contents</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_del_dir_contents))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + In Cycle
<LI>Call Chain = yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_l_n_f
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
</UL>

<P><STRONG><a name="[423]"></a>yaffs_del_file</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_del_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[427]"></a>yaffs_del_link</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_del_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_del_link &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[429]"></a>yaffs_del_symlink</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_del_symlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_del_symlink &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_free
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[437]"></a>yaffs_empty_dir_to_dir</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_empty_dir_to_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = yaffs_empty_dir_to_dir &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
</UL>

<P><STRONG><a name="[438]"></a>yaffs_empty_l_n_f</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_empty_l_n_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = yaffs_empty_l_n_f &rArr; yaffs_del_dir_contents &rArr;  yaffs_del_dir_contents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[3e0]"></a>yaffs_find_alloc_block</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_find_alloc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_find_alloc_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
</UL>

<P><STRONG><a name="[42c]"></a>yaffs_find_chunk_cache</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, yaffs_guts.o(i.yaffs_find_chunk_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_find_chunk_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_chunk_cache
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[441]"></a>yaffs_find_chunk_in_group</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_find_chunk_in_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_match
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[443]"></a>yaffs_find_del_file_chunk</STRONG> (Thumb, 100 bytes, Stack size 112 bytes, yaffs_guts.o(i.yaffs_find_del_file_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = yaffs_find_del_file_chunk &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
</UL>

<P><STRONG><a name="[3fe]"></a>yaffs_find_gc_block</STRONG> (Thumb, 662 bytes, Stack size 64 bytes, yaffs_guts.o(i.yaffs_find_gc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = yaffs_find_gc_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_ok_for_gc
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[484]"></a>yaffs_find_nice_bucket</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, yaffs_guts.o(i.yaffs_find_nice_bucket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_find_nice_bucket
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj_id
</UL>

<P><STRONG><a name="[445]"></a>yaffs_fix_hanging_objs</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_fix_hanging_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = yaffs_fix_hanging_objs &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_has_null_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[447]"></a>yaffs_fix_null_name</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, yaffs_guts.o(i.yaffs_fix_null_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = yaffs_fix_null_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
</UL>

<P><STRONG><a name="[44a]"></a>yaffs_flush_file_cache</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_flush_file_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = yaffs_flush_file_cache &rArr; yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_single_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>

<P><STRONG><a name="[44b]"></a>yaffs_flush_single_cache</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_flush_single_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
</UL>

<P><STRONG><a name="[454]"></a>yaffs_free_obj</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_free_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_free_obj &rArr; yaffs_free_raw_obj &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>

<P><STRONG><a name="[3d9]"></a>yaffs_free_tnode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_free_tnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_free_tnode &rArr; yaffs_free_raw_tnode &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
</UL>

<P><STRONG><a name="[3ff]"></a>yaffs_gc_block</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, yaffs_guts.o(i.yaffs_gc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + In Cycle
<LI>Call Chain = yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_still_some_chunks
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_erased_chunks
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_collected_blk
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[45e]"></a>yaffs_gc_process_chunk</STRONG> (Thumb, 408 bytes, Stack size 136 bytes, yaffs_guts.o(i.yaffs_gc_process_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = yaffs_gc_process_chunk &rArr; yaffs_put_chunk_in_file &rArr; yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_size_load
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[420]"></a>yaffs_generic_obj_del</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_generic_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_whole_cache
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>

<P><STRONG><a name="[3e1]"></a>yaffs_get_block_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_get_block_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_alloc_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[45a]"></a>yaffs_get_erased_chunks</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_get_erased_chunks))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[42d]"></a>yaffs_grab_chunk_cache</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_grab_chunk_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = yaffs_grab_chunk_cache &rArr; yaffs_flush_single_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_worker
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_single_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[469]"></a>yaffs_grab_chunk_worker</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_grab_chunk_worker))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
</UL>

<P><STRONG><a name="[406]"></a>yaffs_handle_chunk_update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_handle_chunk_update))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[471]"></a>yaffs_handle_chunk_wr_error</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_handle_chunk_wr_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = yaffs_handle_chunk_wr_error &rArr; yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_error
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[4be]"></a>yaffs_handle_chunk_wr_ok</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_handle_chunk_wr_ok))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[446]"></a>yaffs_has_null_parent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_has_null_parent))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
</UL>

<P><STRONG><a name="[43d]"></a>yaffs_hash_fn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_hash_fn))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>

<P><STRONG><a name="[474]"></a>yaffs_hash_obj</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_hash_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_hash_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[46c]"></a>yaffs_init_blocks</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_init_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = yaffs_init_blocks &rArr; yaffs_deinit_blocks &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[46b]"></a>yaffs_init_tmp_buffers</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_init_tmp_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yaffs_init_tmp_buffers &rArr; yaffsfs_malloc &rArr; sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[46d]"></a>yaffs_init_tnodes_and_objs</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_init_tnodes_and_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffs_init_tnodes_and_objs &rArr; yaffs_init_raw_tnodes_and_objs &rArr; yaffs_init_raw_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[431]"></a>yaffs_invalidate_chunk_cache</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_invalidate_chunk_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_invalidate_chunk_cache &rArr; yaffs_find_chunk_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[463]"></a>yaffs_invalidate_whole_cache</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, yaffs_guts.o(i.yaffs_invalidate_whole_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_invalidate_whole_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[467]"></a>yaffs_load_name_from_oh</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_load_name_from_oh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_load_name_from_oh &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
</UL>

<P><STRONG><a name="[479]"></a>yaffs_load_oh_from_name</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_load_oh_from_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_load_oh_from_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[444]"></a>yaffs_load_tnode_0</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, yaffs_guts.o(i.yaffs_load_tnode_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_load_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[40f]"></a>yaffs_new_obj</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_new_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj_id
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_max_file_size
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_fake_dir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
</UL>

<P><STRONG><a name="[482]"></a>yaffs_new_obj_id</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_new_obj_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = yaffs_new_obj_id &rArr; yaffs_find_nice_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_nice_bucket
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[4b1]"></a>yaffs_obj_cache_dirty</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_obj_cache_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_obj_cache_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[494]"></a>yaffs_prune_chunks</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, yaffs_guts.o(i.yaffs_prune_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = yaffs_prune_chunks &rArr; yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[495]"></a>yaffs_prune_tree</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_prune_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = yaffs_prune_tree &rArr; yaffs_prune_worker &rArr;  yaffs_prune_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[496]"></a>yaffs_prune_worker</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, yaffs_guts.o(i.yaffs_prune_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = yaffs_prune_worker &rArr;  yaffs_prune_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
</UL>

<P><STRONG><a name="[42e]"></a>yaffs_rd_data_obj</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_rd_data_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = yaffs_rd_data_obj &rArr; yaffs_find_chunk_in_file &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[3db]"></a>yaffs_remove_obj_from_dir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_remove_obj_from_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>

<P><STRONG><a name="[3ef]"></a>yaffs_retire_block</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, yaffs_guts.o(i.yaffs_retire_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = yaffs_retire_block &rArr; yaffs2_checkpt_invalidate &rArr; yaffs2_checkpt_invalidate_stream &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mark_bad
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_erase_block
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_clear_oldest_dirty_seq
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
</UL>

<P><STRONG><a name="[4a2]"></a>yaffs_soft_del_chunk</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_soft_del_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = yaffs_soft_del_chunk &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_update_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
</UL>

<P><STRONG><a name="[426]"></a>yaffs_soft_del_file</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, yaffs_guts.o(i.yaffs_soft_del_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = yaffs_soft_del_file &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
</UL>

<P><STRONG><a name="[4a3]"></a>yaffs_soft_del_worker</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_soft_del_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = yaffs_soft_del_worker &rArr;  yaffs_soft_del_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
</UL>

<P><STRONG><a name="[46f]"></a>yaffs_strip_deleted_objs</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_strip_deleted_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = yaffs_strip_deleted_objs &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[442]"></a>yaffs_tags_match</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffs_guts.o(i.yaffs_tags_match))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
</UL>

<P><STRONG><a name="[455]"></a>yaffs_unhash_obj</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_unhash_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_unhash_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
</UL>

<P><STRONG><a name="[425]"></a>yaffs_unlink_file_if_needed</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_unlink_file_if_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
</UL>

<P><STRONG><a name="[4ad]"></a>yaffs_unlink_worker</STRONG> (Thumb, 232 bytes, Stack size 288 bytes, yaffs_guts.o(i.yaffs_unlink_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
</UL>

<P><STRONG><a name="[415]"></a>yaffs_update_parent</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, yaffs_guts.o(i.yaffs_update_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = yaffs_update_parent &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
</UL>

<P><STRONG><a name="[42f]"></a>yaffs_use_cache</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, yaffs_guts.o(i.yaffs_use_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_use_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[4b2]"></a>yaffs_verify_chunk_written</STRONG> (Thumb, 104 bytes, Stack size 104 bytes, yaffs_guts.o(i.yaffs_verify_chunk_written))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = yaffs_verify_chunk_written &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[430]"></a>yaffs_wr_data_obj</STRONG> (Thumb, 224 bytes, Stack size 200 bytes, yaffs_guts.o(i.yaffs_wr_data_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file_sane
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_single_cache
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[462]"></a>yaffs_write_new_chunk</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, yaffs_guts.o(i.yaffs_write_new_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = yaffs_write_new_chunk &rArr; yaffs_handle_chunk_wr_error &rArr; yaffs_chunk_del &rArr; yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_ok
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[2f8]"></a>nval_find</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, yaffs_nameval.o(i.nval_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nval_find &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_s32
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>

<P><STRONG><a name="[2fc]"></a>nval_used</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, yaffs_nameval.o(i.nval_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nval_used &rArr; yaffs_do_endian_s32
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_s32
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_hasvalues
</UL>

<P><STRONG><a name="[49a]"></a>apply_chunk_offset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_nand.o(i.apply_chunk_offset))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
</UL>

<P><STRONG><a name="[bb]"></a>NANDfunc_read_cycle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_nand_drv.o(i.NANDfunc_read_cycle))
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[47e]"></a>dev_to_buffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_nand_drv.o(i.dev_to_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_MarkBad
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_CheckBad
</UL>

<P><STRONG><a name="[47d]"></a>dev_to_chip</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffs_nand_drv.o(i.dev_to_chip))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_WriteChunk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_ReadChunk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_MarkBad
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_Initialise
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_EraseBlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_Deinitialise
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_nand_drv_CheckBad
</UL>

<P><STRONG><a name="[b8]"></a>yaffs_nand_drv_CheckBad</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_CheckBad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_nand_drv_CheckBad &rArr; nanddrv_read_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[ba]"></a>yaffs_nand_drv_Deinitialise</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_Deinitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_nand_drv_Deinitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[b6]"></a>yaffs_nand_drv_EraseBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_nand_drv_EraseBlock &rArr; nanddrv_erase &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_erase
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[b9]"></a>yaffs_nand_drv_Initialise</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_nand_drv_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[b7]"></a>yaffs_nand_drv_MarkBad</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_MarkBad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = yaffs_nand_drv_MarkBad &rArr; nanddrv_write_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[b5]"></a>yaffs_nand_drv_ReadChunk</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_ReadChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yaffs_nand_drv_ReadChunk &rArr; nanddrv_read_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_read_tr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[b4]"></a>yaffs_nand_drv_WriteChunk</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, yaffs_nand_drv.o(i.yaffs_nand_drv_WriteChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yaffs_nand_drv_WriteChunk &rArr; nanddrv_write_tr &rArr; NandFlash_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nanddrv_write_tr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_chip
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_to_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_nand_drv.o(i.yaffs_nand_install_drv)
</UL>
<P><STRONG><a name="[492]"></a>yaffs_check_tags_extra_packable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, yaffs_packedtags2.o(i.yaffs_check_tags_extra_packable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_check_tags_extra_packable
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[432]"></a>yaffs_dump_packed_tags2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yaffs_packedtags2.o(i.yaffs_dump_packed_tags2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_dump_packed_tags2
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[433]"></a>yaffs_dump_packed_tags2_tags_only</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffs_packedtags2.o(i.yaffs_dump_packed_tags2_tags_only))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2
</UL>

<P><STRONG><a name="[493]"></a>yaffs_dump_tags2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yaffs_packedtags2.o(i.yaffs_dump_tags2))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[498]"></a>med3</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, yaffs_qsort.o(i.med3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = med3
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[497]"></a>swapfunc</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, yaffs_qsort.o(i.swapfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = swapfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[464]"></a>yaffs_get_block_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yaffs_summary.o(i.yaffs_get_block_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
</UL>

<P><STRONG><a name="[4a7]"></a>yaffs_summary_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, yaffs_summary.o(i.yaffs_summary_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_summary_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
</UL>

<P><STRONG><a name="[4a9]"></a>yaffs_summary_sum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, yaffs_summary.o(i.yaffs_summary_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_summary_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
</UL>

<P><STRONG><a name="[4a6]"></a>yaffs_summary_write</STRONG> (Thumb, 290 bytes, Stack size 144 bytes, yaffs_summary.o(i.yaffs_summary_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + In Cycle
<LI>Call Chain = yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_sum
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
</UL>

<P><STRONG><a name="[468]"></a>yaffs_get_tags_from_spare</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, yaffs_tagscompat.o(i.yaffs_get_tags_from_spare))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = yaffs_get_tags_from_spare &rArr; yaffs_check_tags_ecc &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
</UL>

<P><STRONG><a name="[473]"></a>yaffs_handle_rd_data_error</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, yaffs_tagscompat.o(i.yaffs_handle_rd_data_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = yaffs_handle_rd_data_error &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
</UL>

<P><STRONG><a name="[47a]"></a>yaffs_load_tags_to_spare</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, yaffs_tagscompat.o(i.yaffs_load_tags_to_spare))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = yaffs_load_tags_to_spare &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
</UL>

<P><STRONG><a name="[499]"></a>yaffs_rd_chunk_nand</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, yaffs_tagscompat.o(i.yaffs_rd_chunk_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_rd_data_error
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
</UL>

<P><STRONG><a name="[4a4]"></a>yaffs_spare_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yaffs_tagscompat.o(i.yaffs_spare_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_spare_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
</UL>

<P><STRONG><a name="[bf]"></a>yaffs_tags_compat_mark_bad</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, yaffs_tagscompat.o(i.yaffs_tags_compat_mark_bad))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = yaffs_tags_compat_mark_bad &rArr; yaffs_wr_nand
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_nand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagscompat.o(i.yaffs_tags_compat_install)
</UL>
<P><STRONG><a name="[be]"></a>yaffs_tags_compat_query_block</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, yaffs_tagscompat.o(i.yaffs_tags_compat_query_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = yaffs_tags_compat_query_block &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagscompat.o(i.yaffs_tags_compat_install)
</UL>
<P><STRONG><a name="[bd]"></a>yaffs_tags_compat_rd</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, yaffs_tagscompat.o(i.yaffs_tags_compat_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hweight8
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tags_from_spare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagscompat.o(i.yaffs_tags_compat_install)
</UL>
<P><STRONG><a name="[bc]"></a>yaffs_tags_compat_wr</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, yaffs_tagscompat.o(i.yaffs_tags_compat_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = yaffs_tags_compat_wr &rArr; yaffs_load_tags_to_spare &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_nand
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_spare_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tags_to_spare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagscompat.o(i.yaffs_tags_compat_install)
</UL>
<P><STRONG><a name="[4aa]"></a>yaffs_wr_nand</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, yaffs_tagscompat.o(i.yaffs_wr_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_wr_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_mark_bad
</UL>

<P><STRONG><a name="[c3]"></a>yaffs_tags_marshall_mark_bad</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, yaffs_tagsmarshall.o(i.yaffs_tags_marshall_mark_bad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_tags_marshall_mark_bad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
</UL>
<P><STRONG><a name="[c2]"></a>yaffs_tags_marshall_query_block</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, yaffs_tagsmarshall.o(i.yaffs_tags_marshall_query_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = yaffs_tags_marshall_query_block &rArr; yaffs_tags_marshall_read &rArr; yaffs_release_temp_buffer &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
</UL>
<P><STRONG><a name="[c1]"></a>yaffs_tags_marshall_read</STRONG> (Thumb, 312 bytes, Stack size 184 bytes, yaffs_tagsmarshall.o(i.yaffs_tags_marshall_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = yaffs_tags_marshall_read &rArr; yaffs_release_temp_buffer &rArr; yaffsfs_free &rArr; sdfree &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_marshall_query_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
</UL>
<P><STRONG><a name="[c0]"></a>yaffs_tags_marshall_write</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, yaffs_tagsmarshall.o(i.yaffs_tags_marshall_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = yaffs_tags_marshall_write &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_tagsmarshall.o(i.yaffs_tags_marshall_install)
</UL>
<P><STRONG><a name="[4b3]"></a>yaffs_skip_full_verification</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffs_verify.o(i.yaffs_skip_full_verification))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
</UL>

<P><STRONG><a name="[4b5]"></a>yaffs_skip_nand_verification</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffs_verify.o(i.yaffs_skip_nand_verification))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
</UL>

<P><STRONG><a name="[3bc]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[3a8]"></a>swap_uc32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.swap_uc32))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_validity_marker
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_obj
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_dev
</UL>

<P><STRONG><a name="[3b4]"></a>yaffs2_checkpt_obj_bit_assign</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_obj_bit_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_checkpt_obj_bit_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_obj_checkpt_obj
</UL>

<P><STRONG><a name="[39a]"></a>yaffs2_checkpt_obj_bit_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_obj_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs2_checkpt_obj_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
</UL>

<P><STRONG><a name="[399]"></a>yaffs2_checkpt_obj_to_obj</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_obj_to_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = yaffs2_checkpt_obj_to_obj &rArr; yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_bit_get
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[3a3]"></a>yaffs2_checkpt_tnode_worker</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, yaffs_yaffs2.o(i.yaffs2_checkpt_tnode_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + In Cycle
<LI>Call Chain = yaffs2_checkpt_tnode_worker &rArr;  yaffs2_checkpt_tnode_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>

<P><STRONG><a name="[3cf]"></a>yaffs2_dev_to_checkpt_dev</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.yaffs2_dev_to_checkpt_dev))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
</UL>

<P><STRONG><a name="[3a7]"></a>yaffs2_do_endian_checkpt_dev</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_do_endian_checkpt_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_do_endian_checkpt_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
</UL>

<P><STRONG><a name="[3a9]"></a>yaffs2_do_endian_checkpt_obj</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, yaffs_yaffs2.o(i.yaffs2_do_endian_checkpt_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs2_do_endian_checkpt_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[3ab]"></a>yaffs2_do_endian_tnode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, yaffs_yaffs2.o(i.yaffs2_do_endian_tnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs2_do_endian_tnode
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode_copy
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
</UL>

<P><STRONG><a name="[3ac]"></a>yaffs2_do_endian_validity_marker</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_do_endian_validity_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_do_endian_validity_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_validity_marker
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_validity_marker
</UL>

<P><STRONG><a name="[3b3]"></a>yaffs2_obj_checkpt_obj</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_obj_checkpt_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs2_obj_checkpt_obj &rArr; yaffs2_checkpt_obj_bit_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_bit_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
</UL>

<P><STRONG><a name="[39f]"></a>yaffs2_rd_checkpt_data</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = yaffs2_rd_checkpt_data &rArr; yaffs2_rd_checkpt_objs &rArr; yaffs2_checkpt_obj_to_obj &rArr; yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_validity_marker
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
</UL>

<P><STRONG><a name="[3b6]"></a>yaffs2_rd_checkpt_dev</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = yaffs2_rd_checkpt_dev &rArr; yaffs2_checkpt_rd &rArr; yaffs2_checkpt_find_block
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_dev_to_dev
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_dev
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[3b7]"></a>yaffs2_rd_checkpt_objs</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = yaffs2_rd_checkpt_objs &rArr; yaffs2_checkpt_obj_to_obj &rArr; yaffs_find_or_create_by_number &rArr; yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_obj
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_bit_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[3b8]"></a>yaffs2_rd_checkpt_sum</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = yaffs2_rd_checkpt_sum &rArr; yaffs2_checkpt_rd &rArr; yaffs2_checkpt_find_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_get_checkpt_sum
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[3bb]"></a>yaffs2_rd_checkpt_tnodes</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_tnodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = yaffs2_rd_checkpt_tnodes &rArr; yaffs_add_find_tnode_0 &rArr; yaffs_get_tnode &rArr; yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_tnode
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[3b5]"></a>yaffs2_rd_checkpt_validity_marker</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, yaffs_yaffs2.o(i.yaffs2_rd_checkpt_validity_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = yaffs2_rd_checkpt_validity_marker &rArr; yaffs2_checkpt_rd &rArr; yaffs2_checkpt_find_block
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_validity_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[3c3]"></a>yaffs2_scan_chunk</STRONG> (Thumb, 1442 bytes, Stack size 176 bytes, yaffs_yaffs2.o(i.yaffs2_scan_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = yaffs2_scan_chunk &rArr; yaffs_retype_obj &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_oh
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_fetch
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retype_obj
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_to_size
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[3c9]"></a>yaffs2_wr_checkpt_data</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = yaffs2_wr_checkpt_data &rArr; yaffs2_wr_checkpt_objs &rArr; yaffs2_wr_checkpt_tnodes &rArr; yaffs2_checkpt_tnode_worker &rArr;  yaffs2_checkpt_tnode_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_required
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_validity_marker
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
</UL>

<P><STRONG><a name="[3cc]"></a>yaffs2_wr_checkpt_dev</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = yaffs2_wr_checkpt_dev &rArr; yaffs2_checkpt_wr &rArr; yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_dev
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_dev_to_checkpt_dev
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[3cd]"></a>yaffs2_wr_checkpt_objs</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = yaffs2_wr_checkpt_objs &rArr; yaffs2_wr_checkpt_tnodes &rArr; yaffs2_checkpt_tnode_worker &rArr;  yaffs2_checkpt_tnode_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_obj_checkpt_obj
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_checkpt_obj
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_bit_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[3ce]"></a>yaffs2_wr_checkpt_sum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = yaffs2_wr_checkpt_sum &rArr; yaffs2_checkpt_wr &rArr; yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_get_checkpt_sum
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_endian_uc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[3d0]"></a>yaffs2_wr_checkpt_tnodes</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_tnodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = yaffs2_wr_checkpt_tnodes &rArr; yaffs2_checkpt_tnode_worker &rArr;  yaffs2_checkpt_tnode_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
</UL>

<P><STRONG><a name="[3cb]"></a>yaffs2_wr_checkpt_validity_marker</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, yaffs_yaffs2.o(i.yaffs2_wr_checkpt_validity_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = yaffs2_wr_checkpt_validity_marker &rArr; yaffs2_checkpt_wr &rArr; yaffs2_checkpt_flush_buffer &rArr; yaffs2_checkpt_find_erased_block &rArr; yaffs_get_block_info &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_do_endian_validity_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[b2]"></a>yaffs2_ybicmp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, yaffs_yaffs2.o(i.yaffs2_ybicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs2_ybicmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_yaffs2.o(i.yaffs2_scan_backwards)
</UL>
<P><STRONG><a name="[3ba]"></a>yaffs_checkpt_dev_to_dev</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, yaffs_yaffs2.o(i.yaffs_checkpt_dev_to_dev))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
</UL>

<P><STRONG><a name="[3d8]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, yaffsfs.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_device
</UL>

<P><STRONG><a name="[4cf]"></a>list_del</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yaffsfs.o(i.list_del))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_closedir_no_lock
</UL>

<P><STRONG><a name="[4c2]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yaffsfs.o(i.list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>

<P><STRONG><a name="[4a0]"></a>rename_dir_over_file</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffsfs.o(i.rename_dir_over_file))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[49f]"></a>rename_file_over_dir</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, yaffsfs.o(i.rename_file_over_dir))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[3d1]"></a>yaffs_Dofsync</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffs_Dofsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = yaffs_Dofsync &rArr; yaffs_flush_file &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsync
</UL>

<P><STRONG><a name="[451]"></a>yaffsfs_BreakDeviceHandles</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffsfs_BreakDeviceHandles))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = yaffsfs_BreakDeviceHandles &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[44e]"></a>yaffsfs_CheckPath</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_CheckPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffsfs_CheckPath
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[4c1]"></a>yaffsfs_DirAdvance</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffsfs_DirAdvance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_RemoveObjectCallback
</UL>

<P><STRONG><a name="[4c3]"></a>yaffsfs_DoFindDirectory</STRONG> (Thumb, 248 bytes, Stack size 296 bytes, yaffsfs.o(i.yaffsfs_DoFindDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + In Cycle
<LI>Call Chain = yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[459]"></a>yaffsfs_DoStat</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, yaffsfs.o(i.yaffsfs_DoStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = yaffsfs_DoStat &rArr; yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_link_count
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
</UL>

<P><STRONG><a name="[4ae]"></a>yaffsfs_DoUnlink_reldir</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, yaffsfs.o(i.yaffsfs_DoUnlink_reldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = yaffsfs_DoUnlink_reldir &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_reldir
</UL>

<P><STRONG><a name="[48b]"></a>yaffsfs_FindDirectory</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, yaffsfs.o(i.yaffsfs_FindDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4c7]"></a>yaffsfs_FindInodeIdForObject</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_FindInodeIdForObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = yaffsfs_FindInodeIdForObject &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
</UL>

<P><STRONG><a name="[44f]"></a>yaffsfs_FindMountPoint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_FindMountPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffsfs_FindMountPoint &rArr; yaffsfs_FindDevice &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[488]"></a>yaffsfs_FindObject</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, yaffsfs.o(i.yaffsfs_FindObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink_reldir
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4c4]"></a>yaffsfs_FindRoot</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_FindRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = yaffsfs_FindRoot &rArr; yaffsfs_FindDevice &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmalloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>

<P><STRONG><a name="[489]"></a>yaffsfs_FollowLink</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, yaffsfs.o(i.yaffsfs_FollowLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = yaffsfs_FollowLink &rArr; yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4c8]"></a>yaffsfs_GetHandle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_GetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffsfs_GetHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[48d]"></a>yaffsfs_GetInodeIdForObject</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffsfs_GetInodeIdForObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = yaffsfs_GetInodeIdForObject &rArr; yaffsfs_FindInodeIdForObject &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_bug_fn &rArr; die &rArr; NodeReset &rArr; SnoozeAlarm_Sleep &rArr; RTC_SetAin1 &rArr; gettime &rArr; rtc_read &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindInodeIdForObject
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[40a]"></a>yaffsfs_HandleToFileDes</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_HandleToFileDes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToInode
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4c9]"></a>yaffsfs_HandleToInode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_HandleToInode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffsfs_HandleToInode &rArr; yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
</UL>

<P><STRONG><a name="[3d3]"></a>yaffsfs_HandleToObject</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_HandleToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffsfs_HandleToObject &rArr; yaffsfs_HandleToInode &rArr; yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToInode
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsDevBusy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
</UL>

<P><STRONG><a name="[409]"></a>yaffsfs_HandleToPointer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, yaffsfs.o(i.yaffsfs_HandleToPointer))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
</UL>

<P><STRONG><a name="[47c]"></a>yaffsfs_InitHandles</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffsfs_InitHandles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_InitHandles
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[450]"></a>yaffsfs_IsDevBusy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_IsDevBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = yaffsfs_IsDevBusy &rArr; yaffsfs_HandleToObject &rArr; yaffsfs_HandleToInode &rArr; yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_format_common
</UL>

<P><STRONG><a name="[4c0]"></a>yaffsfs_IsPathDivider</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, yaffsfs.o(i.yaffsfs_IsPathDivider))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
</UL>

<P><STRONG><a name="[4c6]"></a>yaffsfs_Match</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yaffsfs.o(i.yaffsfs_Match))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>

<P><STRONG><a name="[4ca]"></a>yaffsfs_NewHandle</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, yaffsfs.o(i.yaffsfs_NewHandle))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandleAndFileDes
</UL>

<P><STRONG><a name="[487]"></a>yaffsfs_NewHandleAndFileDes</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffsfs_NewHandleAndFileDes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_NewHandleAndFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4cb]"></a>yaffsfs_PutFileDes</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_PutFileDes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_closedir_no_lock
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
</UL>

<P><STRONG><a name="[40b]"></a>yaffsfs_PutHandle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_PutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutFileDes
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[4bf]"></a>yaffsfs_PutInode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_PutInode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_ReleaseInode
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutFileDes
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
</UL>

<P><STRONG><a name="[4cc]"></a>yaffsfs_ReleaseInode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_ReleaseInode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
</UL>

<P><STRONG><a name="[b3]"></a>yaffsfs_RemoveObjectCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_RemoveObjectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_RemoveObjectCallback &rArr; yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffsfs.o(i.yaffs_add_device)
</UL>
<P><STRONG><a name="[4cd]"></a>yaffsfs_SetDirRewound</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, yaffsfs.o(i.yaffsfs_SetDirRewound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_SetDirRewound
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_opendir_reldir_no_lock
</UL>

<P><STRONG><a name="[48c]"></a>yaffsfs_TooManyObjects</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, yaffsfs.o(i.yaffsfs_TooManyObjects))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[49e]"></a>yaffsfs_alt_dir_path</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, yaffsfs.o(i.yaffsfs_alt_dir_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yaffsfs_alt_dir_path &rArr; yaffsfs_malloc &rArr; sdcalloc &rArr; sdmalloc &rArr;  die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_malloc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_reldir
</UL>

<P><STRONG><a name="[48e]"></a>yaffsfs_closedir_no_lock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, yaffsfs.o(i.yaffsfs_closedir_no_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_closedir_no_lock &rArr; yaffsfs_SetError
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutFileDes
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[49b]"></a>yaffsfs_do_read</STRONG> (Thumb, 496 bytes, Stack size 88 bytes, yaffsfs.o(i.yaffsfs_do_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = yaffsfs_do_read &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_read
</UL>

<P><STRONG><a name="[4bd]"></a>yaffsfs_do_write</STRONG> (Thumb, 498 bytes, Stack size 88 bytes, yaffsfs.o(i.yaffsfs_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = yaffsfs_do_write &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
</UL>

<P><STRONG><a name="[48a]"></a>yaffsfs_opendir_reldir_no_lock</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, yaffsfs.o(i.yaffsfs_opendir_reldir_no_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = yaffsfs_opendir_reldir_no_lock &rArr; yaffsfs_FollowLink &rArr; yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckMemRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing_reldir
</UL>

<P><STRONG><a name="[278]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[275]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[27b]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27a]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[8f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[41]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
